/**
 * üîß Network Diagnostics and Solutions
 * 
 * TECH HY Ecosystem - Network connectivity troubleshooting
 */

import { getAllRpcEndpoints } from '../config/rpcEndpoints';
import { rpcService } from '../api/rpcService';
import { log } from './logger';

export interface NetworkDiagnostics {
  hasMetaMask: boolean;
  isConnected: boolean;
  chainId: number | null;
  rpcStatus: 'good' | 'degraded' | 'poor' | 'offline';
  workingEndpoints: string[];
  failingEndpoints: string[];
  recommendations: string[];
  rpcStats?: any; // From rpcService.getProviderStats()
}

export class NetworkDiagnosticsService {
  private static instance: NetworkDiagnosticsService;
  
  static getInstance(): NetworkDiagnosticsService {
    if (!this.instance) {
      this.instance = new NetworkDiagnosticsService();
    }
    return this.instance;
  }

  async runDiagnostics(): Promise<NetworkDiagnostics> {
    const results: NetworkDiagnostics = {
      hasMetaMask: this.checkMetaMask(),
      isConnected: false,
      chainId: null,
      rpcStatus: 'offline',
      workingEndpoints: [],
      failingEndpoints: [],
      recommendations: []
    };

    // Check wallet connection
    if (results.hasMetaMask && window.ethereum) {
      try {
        const accounts = await window.ethereum.request({ method: 'eth_accounts' });
        results.isConnected = accounts.length > 0;
        
        if (results.isConnected) {
          const chainId = await window.ethereum.request({ method: 'eth_chainId' });
          results.chainId = parseInt(chainId, 16);
        }
      } catch (error) {
        log.warn('Failed to check wallet connection', { error });
      }
    }

    // ‚úÖ –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç rpcService
    try {
      results.rpcStats = rpcService.getProviderStats();
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
      const stats = results.rpcStats;
      if (stats && stats.fallbackProviders) {
        stats.fallbackProviders.forEach((provider: any) => {
          if (provider.isHealthy && provider.consecutiveErrors < 2) {
            results.workingEndpoints.push(provider.url);
          } else {
            results.failingEndpoints.push(provider.url);
          }
        });
      }
    } catch (error) {
      // Fallback: Test RPC endpoints manually
      await this.testRpcEndpoints(results);
    }
    
    // Generate recommendations
    this.generateRecommendations(results);

    return results;
  }

  private checkMetaMask(): boolean {
    return typeof window !== 'undefined' && 
           typeof window.ethereum !== 'undefined' && 
           window.ethereum.isMetaMask === true;
  }

  private async testRpcEndpoints(results: NetworkDiagnostics): Promise<void> {
    const endpoints = getAllRpcEndpoints();
    const testPromises = endpoints.map(endpoint => this.testSingleEndpoint(endpoint));
    
    const testResults = await Promise.allSettled(testPromises);
    
    testResults.forEach((result, index) => {
      const endpoint = endpoints[index];
      if (result.status === 'fulfilled' && result.value) {
        results.workingEndpoints.push(endpoint);
      } else {
        results.failingEndpoints.push(endpoint);
      }
    });

    // Determine overall RPC status
    const workingCount = results.workingEndpoints.length;
    const totalCount = endpoints.length;
    
    if (workingCount === 0) {
      results.rpcStatus = 'offline';
    } else if (workingCount < totalCount * 0.3) {
      results.rpcStatus = 'poor';
    } else if (workingCount < totalCount * 0.7) {
      results.rpcStatus = 'degraded';
    } else {
      results.rpcStatus = 'good';
    }
  }

  private async testSingleEndpoint(endpoint: string): Promise<boolean> {
    try {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 5000);

      const response = await fetch(endpoint, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          jsonrpc: '2.0',
          method: 'eth_blockNumber',
          params: [],
          id: 1
        }),
        signal: controller.signal
      });

      clearTimeout(timeoutId);
      
      if (!response.ok) {
        return false;
      }

      const data = await response.json();
      return data.result && typeof data.result === 'string';

    } catch (error) {
      return false;
    }
  }

  private generateRecommendations(results: NetworkDiagnostics): void {
    const recommendations: string[] = [];

    // MetaMask recommendations
    if (!results.hasMetaMask) {
      recommendations.push('ü¶ä –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ MetaMask –∏–ª–∏ –¥—Ä—É–≥–æ–π Web3 –∫–æ—à–µ–ª–µ–∫');
      recommendations.push('üì± –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ MetaMask –≤–∫–ª—é—á–µ–Ω–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
    } else if (!results.isConnected) {
      recommendations.push('üîó –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é');
      recommendations.push('üîê –†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ MetaMask –µ—Å–ª–∏ –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
    }

    // Network recommendations
    if (results.chainId && results.chainId !== 97) {
      recommendations.push('üåê –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ BSC Testnet (Chain ID: 97)');
      recommendations.push('‚öôÔ∏è –î–æ–±–∞–≤—å—Ç–µ BSC Testnet –≤ MetaMask –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç');
    }

    // RPC recommendations based on status
    switch (results.rpcStatus) {
      case 'offline':
        recommendations.push('üö® –í—Å–µ RPC –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
        recommendations.push('üì∂ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É');
        recommendations.push('üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç');
        recommendations.push('üåç –í–æ–∑–º–æ–∂–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å BSC Testnet');
        break;
        
      case 'poor':
        recommendations.push('‚ö†Ô∏è –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ RPC –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
        recommendations.push('‚è±Ô∏è –í–æ–∑–º–æ–∂–Ω—ã –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö');
        recommendations.push('üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É');
        break;
        
      case 'degraded':
        recommendations.push('üü° –ù–µ–∫–æ—Ç–æ—Ä—ã–µ RPC –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
        recommendations.push('‚è≥ –í–æ–∑–º–æ–∂–Ω—ã –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏');
        break;
        
      case 'good':
        recommendations.push('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ blockchain —Å—Ç–∞–±–∏–ª—å–Ω–æ');
        break;
    }

    // General troubleshooting
    if (results.rpcStatus !== 'good') {
      recommendations.push('');
      recommendations.push('üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:');
      recommendations.push('‚Ä¢ –û—Ç–∫–ª—é—á–∏—Ç–µ VPN –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ');
      recommendations.push('‚Ä¢ –û—á–∏—Å—Ç–∏—Ç–µ –∫—ç—à –±—Ä–∞—É–∑–µ—Ä–∞ (Ctrl+Shift+Delete)');
      recommendations.push('‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –±—Ä–∞—É–∑–µ—Ä');
      recommendations.push('‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –ª–∏ –∞–Ω—Ç–∏–≤–∏—Ä—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
    }

    results.recommendations = recommendations;
  }

  getStatusMessage(status: NetworkDiagnostics['rpcStatus']): string {
    switch (status) {
      case 'good': return 'üü¢ –û—Ç–ª–∏—á–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ';
      case 'degraded': return 'üü° –°—Ç–∞–±–∏–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ';
      case 'poor': return 'üü† –°–ª–∞–±–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ';
      case 'offline': return 'üî¥ –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è';
      default: return '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  }
}

// Export singleton
export const networkDiagnostics = NetworkDiagnosticsService.getInstance(); 