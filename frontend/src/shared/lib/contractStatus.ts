/**
 * üîç Contract Status Checker for Tech HY Ecosystem
 * 
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –≤ —Ä–∞–∑–Ω—ã—Ö —Å–µ—Ç—è—Ö
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */

import { CONTRACTS, getCurrentNetwork } from '../config/contracts';

export interface ContractStatus {
  address: string;
  isDeployed: boolean;
  isReady: boolean;
  name: string;
  description: string;
  dependencies?: string[];
  features: string[];
}

export interface SystemStatus {
  network: 'mainnet' | 'testnet';
  overallReady: boolean;
  deployedContracts: number;
  totalContracts: number;
  readyFeatures: string[];
  pendingFeatures: string[];
  contracts: {
    [key: string]: ContractStatus;
  };
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –∏ –∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
const CONTRACT_DEFINITIONS = {
  VC_TOKEN: {
    name: 'VC Token',
    description: 'Venture Capital Token - –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–∫–µ–Ω —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã',
    features: ['Token Balance', 'Token Transfer', 'Basic Trading'],
    dependencies: []
  },
  VG_TOKEN: {
    name: 'VG Token', 
    description: 'Venture Growth Token - governance —Ç–æ–∫–µ–Ω',
    features: ['Token Balance', 'Token Transfer', 'Governance Power'],
    dependencies: []
  },
  VG_TOKEN_VOTES: {
    name: 'VG Token Votes',
    description: 'ERC20Votes extension –¥–ª—è VG —Ç–æ–∫–µ–Ω–∞',
    features: ['Delegation', 'Voting Power Tracking', 'Snapshot Voting'],
    dependencies: ['VG_TOKEN']
  },
  LP_TOKEN: {
    name: 'LP Token',
    description: 'VC/WBNB Liquidity Pool Token –æ—Ç PancakeSwap',
    features: ['LP Staking', 'Liquidity Providing', 'Pool Statistics'],
    dependencies: ['VC_TOKEN']
  },
  LP_LOCKER: {
    name: 'LP Locker',
    description: '–ö–æ–Ω—Ç—Ä–∞–∫—Ç –¥–ª—è –ª–æ–∫–∞ LP —Ç–æ–∫–µ–Ω–æ–≤ –∏ –≤—ã–¥–∞—á–∏ VG –Ω–∞–≥—Ä–∞–¥',
    features: ['LP Staking', 'VG Rewards', 'Pool Management', 'EarnVG Widget'],
    dependencies: ['LP_TOKEN', 'VG_TOKEN']
  },
  VCSALE: {
    name: 'VC Sale',
    description: '–ö–æ–Ω—Ç—Ä–∞–∫—Ç –ø—Ä–æ–¥–∞–∂–∏ VC —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ BNB',
    features: ['VC Purchase', 'Swap Widget', 'Price Discovery'],
    dependencies: ['VC_TOKEN']
  },
  GOVERNOR: {
    name: 'Governor',
    description: 'Governance –∫–æ–Ω—Ç—Ä–∞–∫—Ç –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π',
    features: ['Proposal Creation', 'Voting', 'Proposal Execution', 'DAO Governance'],
    dependencies: ['VG_TOKEN_VOTES']
  },
  TIMELOCK: {
    name: 'Timelock',
    description: 'Timelock –∫–æ–Ω—Ç—Ä–∞–∫—Ç –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π',
    features: ['Proposal Queueing', 'Delayed Execution', 'Security'],
    dependencies: ['GOVERNOR']
  },
  STAKING_DAO: {
    name: 'Staking DAO',
    description: 'DAO –∫–æ–Ω—Ç—Ä–∞–∫—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–µ–π–∫–∏–Ω–≥–æ–º',
    features: ['Staking Parameters', 'Rewards Distribution'],
    dependencies: ['LP_LOCKER', 'GOVERNOR']
  }
} as const;

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–¥–µ–ø–ª–æ–µ–Ω –ª–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç
 */
function isContractDeployed(address: string): boolean {
  return address !== '0x0000000000000000000000000000000000000000' && address.length === 42;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤ –ª–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
 */
function isContractReady(contractKey: string, contracts: typeof CONTRACTS): boolean {
  const definition = CONTRACT_DEFINITIONS[contractKey as keyof typeof CONTRACT_DEFINITIONS];
  if (!definition) return false;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∞–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∑–∞–¥–µ–ø–ª–æ–µ–Ω
  const isDeployed = isContractDeployed(contracts[contractKey as keyof typeof contracts]);
  if (!isDeployed) return false;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
  if (definition.dependencies) {
    for (const dep of definition.dependencies) {
      const depAddress = contracts[dep as keyof typeof contracts];
      if (!isContractDeployed(depAddress)) {
        return false;
      }
    }
  }

  return true;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
 */
export function getContractStatus(contractKey: string): ContractStatus {
  const address = CONTRACTS[contractKey as keyof typeof CONTRACTS] || '0x0000000000000000000000000000000000000000';
  const definition = CONTRACT_DEFINITIONS[contractKey as keyof typeof CONTRACT_DEFINITIONS];
  
  if (!definition) {
    return {
      address,
      isDeployed: false,
      isReady: false,
      name: contractKey,
      description: 'Unknown contract',
      features: []
    };
  }

  const isDeployed = isContractDeployed(address);
  const isReady = isContractReady(contractKey, CONTRACTS);

  return {
    address,
    isDeployed,
    isReady,
    name: definition.name,
    description: definition.description,
    dependencies: definition.dependencies,
    features: definition.features
  };
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã
 */
export function getSystemStatus(): SystemStatus {
  const network = getCurrentNetwork();
  const contractKeys = Object.keys(CONTRACT_DEFINITIONS);
  
  const contracts: { [key: string]: ContractStatus } = {};
  let deployedCount = 0;
  let readyCount = 0;
  const readyFeatures: string[] = [];
  const pendingFeatures: string[] = [];

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç
  for (const contractKey of contractKeys) {
    const status = getContractStatus(contractKey);
    contracts[contractKey] = status;

    if (status.isDeployed) {
      deployedCount++;
    }

    if (status.isReady) {
      readyCount++;
      readyFeatures.push(...status.features);
    } else {
      pendingFeatures.push(...status.features);
    }
  }

  // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∏—á–∏
  const uniqueReadyFeatures = [...new Set(readyFeatures)];
  const uniquePendingFeatures = [...new Set(pendingFeatures.filter(f => !uniqueReadyFeatures.includes(f)))];

  return {
    network,
    overallReady: readyCount === contractKeys.length,
    deployedContracts: deployedCount,
    totalContracts: contractKeys.length,
    readyFeatures: uniqueReadyFeatures,
    pendingFeatures: uniquePendingFeatures,
    contracts
  };
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
 */
export function isFeatureAvailable(feature: string): boolean {
  const systemStatus = getSystemStatus();
  return systemStatus.readyFeatures.includes(feature);
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
 */
export function getRequiredContractsForFeature(feature: string): string[] {
  const required: string[] = [];
  
  for (const [contractKey, definition] of Object.entries(CONTRACT_DEFINITIONS)) {
    if (definition.features.includes(feature)) {
      required.push(contractKey);
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
      if (definition.dependencies) {
        required.push(...definition.dependencies);
      }
    }
  }
  
  return [...new Set(required)];
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞/–≤–∏–¥–∂–µ—Ç–∞
 */
export function getComponentReadiness(requiredFeatures: string[]): {
  isReady: boolean;
  availableFeatures: string[];
  missingFeatures: string[];
  missingContracts: string[];
} {
  const systemStatus = getSystemStatus();
  
  const availableFeatures = requiredFeatures.filter(feature => 
    systemStatus.readyFeatures.includes(feature)
  );
  
  const missingFeatures = requiredFeatures.filter(feature => 
    !systemStatus.readyFeatures.includes(feature)
  );
  
  const missingContracts: string[] = [];
  for (const feature of missingFeatures) {
    const required = getRequiredContractsForFeature(feature);
    for (const contractKey of required) {
      if (!systemStatus.contracts[contractKey]?.isReady) {
        missingContracts.push(contractKey);
      }
    }
  }
  
  return {
    isReady: missingFeatures.length === 0,
    availableFeatures,
    missingFeatures,
    missingContracts: [...new Set(missingContracts)]
  };
}

/**
 * –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –≤–∏–¥–∂–µ—Ç–æ–≤
 */
export const WidgetReadiness = {
  VCSaleWidget: () => getComponentReadiness(['VC Purchase', 'Swap Widget']),
  EarnVGWidget: () => getComponentReadiness(['LP Staking', 'VG Rewards', 'EarnVG Widget']),
  LPPoolManager: () => getComponentReadiness(['LP Staking', 'Liquidity Providing', 'Pool Management']),
  GovernanceWidget: () => getComponentReadiness(['Proposal Creation', 'Voting', 'DAO Governance']),
  StakingStats: () => getComponentReadiness(['LP Staking', 'Pool Statistics']),
  TokenBalance: () => getComponentReadiness(['Token Balance', 'Token Transfer'])
};

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export { isContractDeployed, isContractReady }; 