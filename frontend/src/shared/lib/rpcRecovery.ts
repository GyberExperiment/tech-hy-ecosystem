/**
 * üîÑ RPC Connection Recovery Utility
 * 
 * Handles RPC provider failures and automatic recovery for wallet connections
 */

import { reconnect, disconnect } from '@wagmi/core';
import { rainbowConfig } from '../../config/rainbowkit';

let isRecovering = false;
let recoveryTimeout: NodeJS.Timeout | null = null;

/**
 * üö® Handle RPC provider failure and attempt recovery
 */
export const handleRpcFailure = async (error: any) => {
  if (isRecovering) {
    console.log('üîÑ RPC recovery already in progress, skipping...');
    return;
  }

  console.warn('üö® RPC Provider failure detected:', error);
  isRecovering = true;

  try {
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π timeout
    if (recoveryTimeout) {
      clearTimeout(recoveryTimeout);
    }

    // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
    recoveryTimeout = setTimeout(async () => {
      try {
        console.log('üîÑ Attempting RPC recovery...');
        
        // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º wagmi
        await reconnect(rainbowConfig);
        
        console.log('‚úÖ RPC recovery successful');
        isRecovering = false;
      } catch (recoveryError) {
        console.error('‚ùå RPC recovery failed:', recoveryError);
        isRecovering = false;
      }
    }, 2000); // 2 —Å–µ–∫—É–Ω–¥—ã –∑–∞–¥–µ—Ä–∂–∫–∞

  } catch (error) {
    console.error('‚ùå RPC recovery setup failed:', error);
    isRecovering = false;
  }
};

/**
 * üîÑ Force wallet reconnection (for stuck connection states)
 */
export const forceWalletReconnection = async () => {
  try {
    console.log('üîÑ Forcing wallet reconnection...');
    
    // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è
    await disconnect(rainbowConfig);
    
    // –ñ–¥–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // –ó–∞—Ç–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
    await reconnect(rainbowConfig);
    
    console.log('‚úÖ Wallet reconnection successful');
  } catch (error) {
    console.error('‚ùå Wallet reconnection failed:', error);
  }
};

/**
 * üßπ Reset all connection states
 */
export const resetAllConnectionStates = () => {
  if (recoveryTimeout) {
    clearTimeout(recoveryTimeout);
    recoveryTimeout = null;
  }
  isRecovering = false;
  console.log('üßπ All connection states reset');
};

/**
 * üîç Check if recovery is in progress
 */
export const isRpcRecoveryInProgress = () => isRecovering;

/**
 * üéØ Smart connection handler that prevents loops
 */
export const smartWalletConnect = async (connectFunction: () => void) => {
  // –ï—Å–ª–∏ —É–∂–µ –∏–¥–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ, –∂–¥–µ–º –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  if (isRecovering) {
    console.log('üîÑ Waiting for RPC recovery to complete...');
    return new Promise((resolve) => {
      const checkRecovery = () => {
        if (!isRecovering) {
          resolve(connectFunction());
        } else {
          setTimeout(checkRecovery, 500);
        }
      };
      checkRecovery();
    });
  }

  // –û–±—ã—á–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  connectFunction();
}; 