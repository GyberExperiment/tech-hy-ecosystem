/**
 * üöÄ Centralized Crypto Data Manager
 * 
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –∏ —Ä–∞—Å—à–∏—Ä—è–µ—Ç useTokenData + usePoolInfo + –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 * –£—Å—Ç—Ä–∞–Ω—è–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–∂–¥—É –≤–∏–¥–∂–µ—Ç–∞–º–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç RPC –∑–∞–ø—Ä–æ—Å—ã
 */

import { useState, useEffect, useCallback, useMemo, useRef } from 'react';
import { ethers } from 'ethers';
import { useTokenData } from '../../entities/Token/model/useTokenData';
import { usePoolInfo } from '../../entities/Staking/model/usePoolInfo';
import { useWeb3 } from './Web3Context';
import { CONTRACTS } from '../config/contracts';
import { rpcService } from '../api/rpcService';
import { log } from './logger';

export interface ExtendedPoolData {
  // –ò–∑ usePoolInfo
  vcReserve: string;
  bnbReserve: string;
  price: string;
  isLoaded: boolean;
  
  // ‚úÖ –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è StakingStats (–∏–∑ LP_LOCKER –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞)
  totalLockedLP: string;
  totalVGIssued: string;
  totalVGDeposited: string;
  availableVG: string;
  lpToVgRatio: string;
  lpDivisor: string;
  
  // –ú–µ—Ç–∞-–¥–∞–Ω–Ω—ã–µ
  lastUpdated: number;
  error: string | null;
}

export interface CryptoDataManagerReturn {
  // Token data (–∏–∑ useTokenData)
  balances: {
    VC: string;
    VG: string;
    VGVotes: string;
    LP: string;
    BNB: string;
  };
  tokens: any[];
  tokensLoading: boolean;
  tokensRefreshing: boolean;
  
  // Pool data (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π usePoolInfo + StakingStats)
  poolData: ExtendedPoolData;
  poolLoading: boolean;
  stakingStatsLoading: boolean;
  
  // Unified actions
  refreshAll: () => void;
  refreshTokens: () => void;
  refreshPool: () => void;
  refreshStakingStats: () => void;
  
  // Utility functions
  formatBalance: (balance: string) => string;
  
  // Contract safety checks
  contractsReady: {
    vcContract: boolean;
    vgContract: boolean;
    lpLockerContract: boolean;
    lpContract: boolean;
  };
  
  // Computed values
  hasAnyBalance: boolean;
  isSystemReady: boolean;
}

// ‚úÖ Contract ABIs –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ pool –¥–∞–Ω–Ω—ã—Ö
const LPLOCKER_ABI = [
  "function getPoolInfo() view returns (uint256 totalLocked, uint256 totalIssued, uint256 totalDeposited, uint256 availableVG)",
  "function config() view returns (address authority, address vgTokenAddress, address vcTokenAddress, address pancakeRouter, address lpTokenAddress, address stakingVaultAddress, uint256 lpDivisor, uint256 lpToVgRatio, uint256 minBnbAmount, uint256 minVcAmount, uint16 maxSlippageBps, uint16 defaultSlippageBps, bool mevProtectionEnabled, uint256 minTimeBetweenTxs, uint8 maxTxPerUserPerBlock, uint256 totalLockedLp, uint256 totalVgIssued, uint256 totalVgDeposited)"
];

// ‚úÖ Global cache –¥–ª—è staking stats
const stakingStatsCache = new Map<string, { data: any; timestamp: number }>();
const STAKING_STATS_CACHE_DURATION = 120000; // 2 minutes

/**
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ö—É–∫ –¥–ª—è –≤—Å–µ—Ö crypto –¥–∞–Ω–Ω—ã—Ö
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç useTokenData, usePoolInfo –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
 */
export const useCryptoDataManager = (): CryptoDataManagerReturn => {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ö—É–∫–∏
  const {
    balances,
    tokens,
    loading: tokensLoading,
    refreshing: tokensRefreshing,
    refreshData: refreshTokens,
    formatBalance,
    hasAnyBalance,
    triggerGlobalRefresh
  } = useTokenData();
  
  const {
    poolInfo,
    loading: poolLoading,
    error: poolError,
    refreshPoolInfo: refreshPool,
    lastUpdated
  } = usePoolInfo();
  
  const {
    account,
    isConnected,
    isCorrectNetwork,
    vcContract,
    vgContract,
    lpLockerContract,
    lpContract
  } = useWeb3();

  // ‚úÖ State –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö staking stats –¥–∞–Ω–Ω—ã—Ö
  const [stakingStats, setStakingStats] = useState({
    totalLockedLP: '0',
    totalVGIssued: '0',
    totalVGDeposited: '0',
    availableVG: '0',
    lpToVgRatio: '10',
    lpDivisor: '1000000000000000000000'
  });
  const [stakingStatsLoading, setStakingStatsLoading] = useState(false);
  const [stakingStatsError, setStakingStatsError] = useState<string | null>(null);
  
  // Refs –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–æ–π
  const stakingStatsFetchInProgress = useRef(false);
  const mountedRef = useRef(true);

  // Contract safety checks
  const contractsReady = useMemo(() => ({
    vcContract: !!vcContract,
    vgContract: !!vgContract,
    lpLockerContract: !!lpLockerContract,
    lpContract: !!lpContract
  }), [vcContract, vgContract, lpLockerContract, lpContract]);

  // ‚úÖ –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö staking —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const loadStakingStats = useCallback(async (forceRefresh = false): Promise<void> => {
    if (stakingStatsFetchInProgress.current) {
      log.debug('Staking stats fetch already in progress, skipping', {
        component: 'useCryptoDataManager',
        function: 'loadStakingStats'
      });
      return;
    }

    if (!account || !isConnected || !isCorrectNetwork) {
      log.debug('Skipping staking stats fetch - not ready', {
        component: 'useCryptoDataManager',
        function: 'loadStakingStats',
        account: !!account,
        isConnected,
        isCorrectNetwork
      });
      return;
    }

    // Check cache
    const cacheKey = `staking-stats-${account}`;
    const cached = stakingStatsCache.get(cacheKey);
    if (!forceRefresh && cached && Date.now() - cached.timestamp < STAKING_STATS_CACHE_DURATION) {
      log.debug('Using cached staking stats', {
        component: 'useCryptoDataManager',
        function: 'loadStakingStats',
        timeSinceLastFetch: Date.now() - cached.timestamp
      });
      setStakingStats(cached.data);
      return;
    }

    stakingStatsFetchInProgress.current = true;
    setStakingStatsLoading(true);
    setStakingStatsError(null);

    log.info('Loading staking stats from LP_LOCKER contract', {
      component: 'useCryptoDataManager',
      function: 'loadStakingStats',
      account
    });

    try {
      // ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º pool info from LPLocker –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
      const poolInfo = await rpcService.withFallback(async (rpcProvider) => {
        const lpLockerContract = new ethers.Contract(CONTRACTS.LP_LOCKER, LPLOCKER_ABI, rpcProvider);
        return await (lpLockerContract as any).getPoolInfo();
      });

      log.info('Pool info retrieved from LPLocker', {
        component: 'useCryptoDataManager',
        function: 'loadStakingStats',
        totalLocked: ethers.formatEther(poolInfo[0] || 0),
        totalIssued: ethers.formatEther(poolInfo[1] || 0),
        totalDeposited: ethers.formatEther(poolInfo[2] || 0),
        availableVG: ethers.formatEther(poolInfo[3] || 0)
      });

      // ‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–∫–∞–∫ –≤ StakingStats)
      const config = {
        lpToVgRatio: 10,
        lpDivisor: '1000000000000000000000' // 1e21
      };

      const newStakingStats = {
        totalLockedLP: ethers.formatEther(poolInfo[0] || 0),
        totalVGIssued: ethers.formatEther(poolInfo[1] || 0),
        totalVGDeposited: ethers.formatEther(poolInfo[2] || 0),
        availableVG: ethers.formatEther(poolInfo[3] || 0),
        lpToVgRatio: config.lpToVgRatio.toString(),
        lpDivisor: config.lpDivisor
      };

      if (mountedRef.current) {
        setStakingStats(newStakingStats);
        const timestamp = Date.now();
        
        // Cache the result
        stakingStatsCache.set(cacheKey, { data: newStakingStats, timestamp });
        
        log.info('Staking stats updated successfully', {
          component: 'useCryptoDataManager',
          function: 'loadStakingStats',
          newStakingStats
        });
      }

    } catch (error: any) {
      log.error('Failed to load staking stats', {
        component: 'useCryptoDataManager',
        function: 'loadStakingStats',
        account
      }, error);
      
      if (mountedRef.current) {
        setStakingStatsError(error.message || 'Failed to load staking stats');
        
        // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
        const fallbackStats = {
          totalLockedLP: '0',
          totalVGIssued: '0',
          totalVGDeposited: '0',
          availableVG: '0',
          lpToVgRatio: '10',
          lpDivisor: '1000000000000000000000'
        };
        
        setStakingStats(fallbackStats);
      }
    } finally {
      if (mountedRef.current) {
        setStakingStatsLoading(false);
      }
      stakingStatsFetchInProgress.current = false;
    }
  }, [account, isConnected, isCorrectNetwork]);

  // ‚úÖ Auto-load staking stats when wallet connects
  useEffect(() => {
    if (isConnected && isCorrectNetwork && account) {
      // Initial load with delay
      const timeoutId = setTimeout(() => {
        if (mountedRef.current && !stakingStatsFetchInProgress.current) {
          loadStakingStats(false);
        }
      }, 1000);
      
      return () => clearTimeout(timeoutId);
    }
  }, [account, isConnected, isCorrectNetwork, loadStakingStats]);

  // Cleanup on unmount
  useEffect(() => {
    mountedRef.current = true;
    return () => {
      mountedRef.current = false;
    };
  }, []);

  // Extended pool data —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
  const poolData = useMemo((): ExtendedPoolData => {
    return {
      // –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ usePoolInfo
      vcReserve: poolInfo.vcReserve,
      bnbReserve: poolInfo.bnbReserve,
      price: poolInfo.price,
      isLoaded: poolInfo.isLoaded,
      
      // ‚úÖ –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ LP_LOCKER –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
      totalLockedLP: stakingStats.totalLockedLP,
      totalVGIssued: stakingStats.totalVGIssued,
      totalVGDeposited: stakingStats.totalVGDeposited,
      availableVG: stakingStats.availableVG,
      lpToVgRatio: stakingStats.lpToVgRatio,
      lpDivisor: stakingStats.lpDivisor,
      
      // –ú–µ—Ç–∞-–¥–∞–Ω–Ω—ã–µ
      lastUpdated,
      error: poolError || stakingStatsError
    };
  }, [poolInfo, stakingStats, lastUpdated, poolError, stakingStatsError]);

  // System readiness check
  const isSystemReady = useMemo(() => {
    return isConnected && 
           isCorrectNetwork && 
           !!account && 
           contractsReady.vcContract && 
           contractsReady.lpLockerContract;
  }, [isConnected, isCorrectNetwork, account, contractsReady]);

  // ‚úÖ Refresh function –¥–ª—è staking stats
  const refreshStakingStats = useCallback(() => {
    loadStakingStats(true);
  }, [loadStakingStats]);

  // Unified refresh function
  const refreshAll = useCallback(() => {
    log.info('CryptoDataManager: Triggering global refresh', {
      component: 'useCryptoDataManager',
      account
    });
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
    refreshTokens();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ pool –¥–∞–Ω–Ω—ã—Ö
    refreshPool();
    
    // ‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ staking stats
    refreshStakingStats();
    
    // –¢—Ä–∏–≥–≥–µ—Ä–∏–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    triggerGlobalRefresh();
  }, [refreshTokens, refreshPool, refreshStakingStats, triggerGlobalRefresh, account]);

  return {
    // Token data
    balances,
    tokens,
    tokensLoading,
    tokensRefreshing,
    
    // Pool data (—Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ staking stats)
    poolData,
    poolLoading,
    stakingStatsLoading,
    
    // Actions
    refreshAll,
    refreshTokens,
    refreshPool,
    refreshStakingStats,
    
    // Utilities
    formatBalance,
    contractsReady,
    
    // Computed
    hasAnyBalance,
    isSystemReady
  };
};

/**
 * Hook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è extended staking —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 * –î–æ–ø–æ–ª–Ω—è–µ—Ç CryptoDataManager —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è StakingStats
 */
export const useStakingStats = () => {
  const baseData = useCryptoDataManager();
  
  return {
    ...baseData,
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ computed –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è StakingStats
    calculatePotentialVG: useCallback((vcAmount: number, bnbAmount: number): number => {
      if (!baseData.poolData.lpDivisor || !baseData.poolData.lpToVgRatio) return 0;
      
      const lpDivisor = parseFloat(baseData.poolData.lpDivisor);
      const lpToVgRatio = parseFloat(baseData.poolData.lpToVgRatio);
      const expectedLP = (vcAmount * bnbAmount) / lpDivisor;
      return expectedLP * lpToVgRatio;
    }, [baseData.poolData.lpDivisor, baseData.poolData.lpToVgRatio])
  };
};

/**
 * Utility function –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏
 * –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç TypeScript –æ—à–∏–±–∫–∏ "possibly undefined"
 */
export const withContractSafety = <T,>(
  contract: T | null | undefined,
  operation: (contract: T) => Promise<any>,
  fallbackValue?: any
) => {
  if (!contract) {
    log.warn('Contract not available, using fallback', {
      component: 'withContractSafety',
      hasFallback: !!fallbackValue
    });
    return Promise.resolve(fallbackValue || null);
  }
  
  return operation(contract);
};