import React, { useState, useEffect, useMemo } from 'react';
import { ethers } from 'ethers';
import { useWeb3 } from '../contexts/Web3Context';
import { CONTRACTS } from '../constants/contracts';
import { toast } from 'react-hot-toast';
import { Coins, Zap, TrendingUp, Wallet, Info, RefreshCw, AlertCircle } from 'lucide-react';
import { cn } from '@/utils/cn';
import { useTokenData } from '../hooks/useTokenData';
import { usePoolInfo } from '../hooks/usePoolInfo';

const LPLOCKER_ABI = [
  "function earnVG(uint256 vcAmount, uint256 bnbAmount, uint16 slippageBps) external payable",
  "function lockLPTokens(uint256 lpAmount) external",  
  "function owner() view returns (address)",
  "function config() external view returns (address authority, address vgTokenAddress, address vcTokenAddress, address pancakeRouter, address lpTokenAddress, address stakingVaultAddress, uint256 lpDivisor, uint256 lpToVgRatio, uint256 minBnbAmount, uint256 minVcAmount, uint16 maxSlippageBps, uint16 defaultSlippageBps, bool mevProtectionEnabled, uint256 minTimeBetweenTxs, uint8 maxTxPerUserPerBlock, uint256 totalLockedLp, uint256 totalVgIssued, uint256 totalVgDeposited)",
];

interface EarnVGWidgetProps {
  className?: string;
}

const EarnVGWidget: React.FC<EarnVGWidgetProps> = ({ className = '' }) => {
  const { account, signer, isConnected, isCorrectNetwork, provider, vcContract, lpLockerContract, vgContract, updateBSCTestnetRPC } = useWeb3();
  
  // Use centralized hooks
  const { balances, loading: balancesLoading, fetchTokenData } = useTokenData();
  const { poolInfo, loading: poolLoading, refreshPoolInfo } = usePoolInfo();
  
  // State management
  const [loading, setLoading] = useState(false);
  const [mode, setMode] = useState<'create' | 'lock'>('create');
  const [vcAmount, setVcAmount] = useState('');
  const [bnbAmount, setBnbAmount] = useState('');
  const [lpAmount, setLpAmount] = useState('');
  const [currentAllowance, setCurrentAllowance] = useState<string>('0');
  const [checkingAllowance, setCheckingAllowance] = useState(false);
  
  // Memoized calculations
  const calculatedBnbAmount = useMemo(() => {
    if (!vcAmount || !poolInfo.isLoaded || poolInfo.vcReserve === '0' || poolInfo.bnbReserve === '0') {
      return '';
    }
    
    try {
      const vcValue = parseFloat(vcAmount);
      if (isNaN(vcValue) || vcValue <= 0) return '';
      
      const ratio = parseFloat(poolInfo.bnbReserve) / parseFloat(poolInfo.vcReserve);
      const calculatedBnb = (vcValue * ratio).toFixed(6);
      
      console.log(`EarnVGWidget: Auto-calc BNB: ${vcValue} VC * ${ratio.toFixed(8)} = ${calculatedBnb} BNB`);
      return calculatedBnb;
    } catch (error) {
      console.error('EarnVGWidget: Error calculating BNB amount:', error);
      return '';
    }
  }, [vcAmount, poolInfo]);

  // Auto-update BNB amount when VC changes
  useEffect(() => {
    if (calculatedBnbAmount && calculatedBnbAmount !== bnbAmount) {
      setBnbAmount(calculatedBnbAmount);
    }
  }, [calculatedBnbAmount]);

  // Auto-check allowance when wallet connects
  useEffect(() => {
    if (account && vcContract && mode === 'create') {
      const checkAllowanceOnMount = async () => {
        try {
          console.log('üîç Auto-–ø—Ä–æ–≤–µ—Ä—è–µ–º VC allowance –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏...');
          
          const readOnlyProvider = new ethers.JsonRpcProvider('https://bsc-testnet-rpc.publicnode.com');
          const readOnlyVCContract = new ethers.Contract(CONTRACTS.VC_TOKEN, [
            "function allowance(address owner, address spender) view returns (uint256)"
          ], readOnlyProvider);
          
          const allowance = await (readOnlyVCContract as any).allowance(account, CONTRACTS.LP_LOCKER);
          const allowanceFormatted = ethers.formatEther(allowance);
          
          setCurrentAllowance(allowanceFormatted);
          console.log(`‚úÖ Auto-check VC allowance: ${allowanceFormatted} VC`);
        } catch (error) {
          console.log('‚ö†Ô∏è Auto-check allowance failed:', error);
        }
      };
      
      checkAllowanceOnMount();
    }
  }, [account, vcContract, mode]);

  // Check current allowance function
  const checkCurrentAllowance = async () => {
    if (!account || !vcContract) {
      toast.error('–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫');
      return;
    }

    setCheckingAllowance(true);
    try {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π VC allowance...');
      
      const readOnlyProvider = new ethers.JsonRpcProvider('https://bsc-testnet-rpc.publicnode.com');
      const readOnlyVCContract = new ethers.Contract(CONTRACTS.VC_TOKEN, [
        "function allowance(address owner, address spender) view returns (uint256)"
      ], readOnlyProvider);
      
      const allowance = await (readOnlyVCContract as any).allowance(account, CONTRACTS.LP_LOCKER);
      const allowanceFormatted = ethers.formatEther(allowance);
      
      setCurrentAllowance(allowanceFormatted);
      console.log(`‚úÖ –¢–µ–∫—É—â–∏–π VC allowance: ${allowanceFormatted} VC`);
      
      if (parseFloat(allowanceFormatted) > 0) {
        toast.success(`Approve —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω! Allowance: ${parseFloat(allowanceFormatted).toFixed(2)} VC`);
      } else {
        toast.success('Approve –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω. Allowance: 0 VC');
      }
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ allowance:', error);
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ allowance');
    } finally {
      setCheckingAllowance(false);
    }
  };

  // Transaction handlers
  const handleEarnVG = async () => {
    console.log('üéØ EarnVG: –ù–∞—á–∞–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–∏');
    
    if (!signer || !account || !vcContract || !lpLockerContract) {
      const missingItems = [];
      if (!signer) missingItems.push('signer');
      if (!account) missingItems.push('account');
      if (!vcContract) missingItems.push('vcContract');
      if (!lpLockerContract) missingItems.push('lpLockerContract');
      
      console.error('‚ùå EarnVG: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:', missingItems.join(', '));
      toast.error('–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫');
      return;
    }

    if (!vcAmount || !bnbAmount) {
      console.error('‚ùå EarnVG: –ù–µ —É–∫–∞–∑–∞–Ω—ã —Å—É–º–º—ã', { vcAmount, bnbAmount });
      toast.error('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ VC –∏ BNB');
      return;
    }

    const vcAmountWei = ethers.parseEther(vcAmount);
    const bnbAmountWei = ethers.parseEther(bnbAmount);

    console.log('üí∞ EarnVG: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    console.log(`–¢—Ä–µ–±—É–µ—Ç—Å—è VC: ${vcAmount}, –¥–æ—Å—Ç—É–ø–Ω–æ: ${balances.VC || '0'}`);
    console.log(`–¢—Ä–µ–±—É–µ—Ç—Å—è BNB: ${bnbAmount}, –¥–æ—Å—Ç—É–ø–Ω–æ: ${balances.BNB || '0'}`);

    if (parseFloat(balances.VC || '0') < parseFloat(vcAmount)) {
      console.error('‚ùå EarnVG: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ VC —Ç–æ–∫–µ–Ω–æ–≤');
      toast.error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ VC —Ç–æ–∫–µ–Ω–æ–≤');
      return;
    }

    if (parseFloat(balances.BNB || '0') < parseFloat(bnbAmount)) {
      console.error('‚ùå EarnVG: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ BNB');
      toast.error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ BNB');
      return;
    }

    setLoading(true);
    
    try {
      console.log('üîç EarnVG: –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π');
      
      // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã Node.js —Å–∫—Ä–∏–ø—Ç–∞–º–∏)
      // –ó–∞–º–µ–Ω—è–µ—Ç config() –≤—ã–∑–æ–≤ –∫–æ—Ç–æ—Ä—ã–π –∑–∞–≤–∏—Å–∞–ª –Ω–∞ 10+ —Å–µ–∫—É–Ω–¥ –≤ browser
      const stakingVault = CONTRACTS.LP_LOCKER; // 0x9269baba99cE0388Daf814E351b4d556fA728D32
      const maxSlippageBps = 1000; // 10.0%
      const mevEnabled = false;
      const lpDivisor = ethers.parseEther('1000'); // 1e21
      const lpToVgRatio = 10;
      
      console.log(`‚úÖ EarnVG: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π`);
      console.log(`Staking Vault: ${stakingVault}`);
      console.log(`Max Slippage: ${maxSlippageBps} BPS (${(maxSlippageBps / 100).toFixed(1)}%)`);
      console.log(`MEV Protection: ${mevEnabled}`);
      console.log(`LP Divisor: ${lpDivisor.toString()}`);
      console.log(`LP to VG Ratio: ${lpToVgRatio}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º VG –±–∞–ª–∞–Ω—Å vault'–∞ —Å read-only –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º
      if (!vgContract) {
        console.error('‚ùå EarnVG: VG –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        toast.error('VG –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        return;
      }
      
      console.log('üí∞ EarnVG: –ü—Ä–æ–≤–µ—Ä—è–µ–º VG –±–∞–ª–∞–Ω—Å vault...');
      
      let vaultVGBalance: bigint;
      try {
        // –°–æ–∑–¥–∞–µ–º read-only VG –∫–æ–Ω—Ç—Ä–∞–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞
        const readOnlyProvider = new ethers.JsonRpcProvider('https://bsc-testnet-rpc.publicnode.com');
        const readOnlyVGContract = new ethers.Contract(CONTRACTS.VG_TOKEN, [
          "function balanceOf(address) view returns (uint256)"
        ], readOnlyProvider);
        
        vaultVGBalance = await (readOnlyVGContract as any).balanceOf(stakingVault);
        console.log(`VG –±–∞–ª–∞–Ω—Å vault'–∞: ${ethers.formatEther(vaultVGBalance)} VG`);
      } catch (balanceError) {
        console.error('‚ùå EarnVG: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å VG –±–∞–ª–∞–Ω—Å vault:', balanceError);
        toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å VG –±–∞–ª–∞–Ω—Å vault');
        return;
      }
      
      if (vaultVGBalance === 0n) {
        console.error('‚ùå EarnVG: VG vault –ø—É—Å—Ç–æ–π - –Ω–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –Ω–∞–≥—Ä–∞–¥');
        toast.error('VG vault –ø—É—Å—Ç–æ–π - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
        return;
      }
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–µ–º—É—é –Ω–∞–≥—Ä–∞–¥—É
      console.log('üßÆ EarnVG: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–µ–º—É—é –Ω–∞–≥—Ä–∞–¥—É...');
      
      const expectedLp = (vcAmountWei * bnbAmountWei) / lpDivisor;
      const expectedVGReward = expectedLp * BigInt(lpToVgRatio);
      
      console.log(`–û–∂–∏–¥–∞–µ–º–∞—è LP: ${ethers.formatEther(expectedLp)} LP`);
      console.log(`–û–∂–∏–¥–∞–µ–º–∞—è VG –Ω–∞–≥—Ä–∞–¥–∞: ${ethers.formatEther(expectedVGReward)} VG`);
      
      if (vaultVGBalance < expectedVGReward) {
        console.error('‚ùå EarnVG: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ VG –≤ vault –¥–ª—è –Ω–∞–≥—Ä–∞–¥—ã');
        toast.error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ VG –≤ vault. –ù—É–∂–Ω–æ: ${ethers.formatEther(expectedVGReward)}, –¥–æ—Å—Ç—É–ø–Ω–æ: ${ethers.formatEther(vaultVGBalance)}`);
        return;
      }

      console.log('üîê EarnVG: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ approve VC —Ç–æ–∫–µ–Ω–æ–≤');
      
      // Check allowance with read-only contract
      let allowance: bigint;
      try {
        const readOnlyProvider = new ethers.JsonRpcProvider('https://bsc-testnet-rpc.publicnode.com');
        const readOnlyVCContract = new ethers.Contract(CONTRACTS.VC_TOKEN, [
          "function allowance(address owner, address spender) view returns (uint256)",
          "function approve(address spender, uint256 amount) returns (bool)"
        ], readOnlyProvider);
        
        allowance = await (readOnlyVCContract as any).allowance(account, CONTRACTS.LP_LOCKER);
        console.log(`–¢–µ–∫—É—â–∏–π VC allowance: ${ethers.formatEther(allowance)} VC`);
      } catch (allowanceError) {
        console.error('‚ùå EarnVG: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å allowance:', allowanceError);
        toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å allowance');
        return;
      }

      // Separate try-catch for approve operations
      try {
        console.log('üîê EarnVG: –ù–∞—á–∏–Ω–∞–µ–º approve –æ–ø–µ—Ä–∞—Ü–∏—é');
        
        // ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –ü–†–û–í–ï–†–ö–£ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –≤–º–µ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        if (!account || !signer) {
          throw new Error('–ö–æ—à–µ–ª—ë–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç–µ MetaMask.');
        }
        console.log('‚úÖ EarnVG: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ:', account.slice(0, 6) + '...');

        console.log('üîê EarnVG: –°–æ–∑–¥–∞–µ–º VC –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Å signer');
        const vcContractWithSigner = vcContract.connect(signer);
        console.log('‚úÖ EarnVG: VC –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Å signer —Å–æ–∑–¥–∞–Ω:', !!vcContractWithSigner);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        console.log('üîç EarnVG: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ VC –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:');
        console.log('  - VC –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∞–¥—Ä–µ—Å:', CONTRACTS.VC_TOKEN);
        console.log('  - Signer –∞–¥—Ä–µ—Å:', await signer.getAddress());
        console.log('  - Signer provider:', !!signer.provider);
        console.log('  - Contract target:', (vcContractWithSigner as any).target);
        console.log('  - Contract interface:', !!(vcContractWithSigner as any).interface);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ approve —Ñ—É–Ω–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        try {
          const approveFn = (vcContractWithSigner as any).approve;
          console.log('  - approve —Ñ—É–Ω–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', !!approveFn);
          console.log('  - approve —Ñ—É–Ω–∫—Ü–∏—è —Ç–∏–ø:', typeof approveFn);
        } catch (e) {
          console.error('  - –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ approve —Ñ—É–Ω–∫—Ü–∏–∏:', e);
        }
        
        const MAX_UINT256 = (2n ** 256n - 1n).toString();
        console.log('üîê EarnVG: MAX_UINT256:', MAX_UINT256);

        console.log('üîê EarnVG: –ü—ã—Ç–∞–µ–º—Å—è –æ—Ü–µ–Ω–∏—Ç—å –≥–∞–∑ –¥–ª—è approve');
        let gasLimitOverride: bigint | undefined;
        try {
          const gasFn = (vcContractWithSigner as any).estimateGas?.approve;
          console.log('üîê EarnVG: Gas estimation function exists:', !!gasFn);
          if (gasFn) {
            console.log('üîê EarnVG: –í—ã–∑—ã–≤–∞–µ–º estimateGas.approve...');
            const est: bigint = await gasFn(CONTRACTS.LP_LOCKER, MAX_UINT256);
            gasLimitOverride = (est * 120n) / 100n; // +20 %
            console.log(`‚úÖ EarnVG: Gas estimated: ${est.toString()}, with override: ${gasLimitOverride.toString()}`);
          }
        } catch (gasError) {
          console.log('‚ö†Ô∏è EarnVG: Gas estimation failed, will use default:', gasError);
        }

        console.log('üöÄ EarnVG: –í—ã–∑—ã–≤–∞–µ–º approve —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é...');
        console.log('üöÄ EarnVG: approve –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:');
        console.log('  - spender:', CONTRACTS.LP_LOCKER);
        console.log('  - amount:', MAX_UINT256);
        console.log('  - gasLimit:', gasLimitOverride ? gasLimitOverride.toString() : 'default');
        
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è Arc browser –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        toast.loading('Approve –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ MetaMask. –ï—Å–ª–∏ –Ω–µ –≤–∏–¥–∏—Ç–µ –æ–∫–Ω–æ - –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–∫–æ–Ω–∫—É MetaMask –≤ –ø–∞–Ω–µ–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π!', {
          duration: 10000,
          id: 'arc-browser-help'
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º timeout –¥–ª—è approve –æ–ø–µ—Ä–∞—Ü–∏–∏
        const approvePromise = (vcContractWithSigner as any).approve(
          CONTRACTS.LP_LOCKER,
          MAX_UINT256,
          gasLimitOverride ? { gasLimit: gasLimitOverride } : {}
        );

        const timeoutPromise = new Promise((_, reject) => 
          setTimeout(() => reject(new Error('Approve transaction timeout after 60 seconds')), 60000)
        );

        console.log('‚è∞ EarnVG: –û–∂–∏–¥–∞–µ–º approve —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é (timeout 60s)...');
        const approveTx = await Promise.race([approvePromise, timeoutPromise]);

        console.log(`üìã EarnVG: Approve TX hash: ${(approveTx as any).hash}`);
        console.log('‚è∞ EarnVG: –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ approve —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');

        const receiptPromise = (approveTx as any).wait();
        const receiptTimeoutPromise = new Promise((_, reject) => 
          setTimeout(() => reject(new Error('Approve receipt timeout after 60 seconds')), 60000)
        );

        const approveReceipt = await Promise.race([receiptPromise, receiptTimeoutPromise]);

        console.log('üìã EarnVG: Approve receipt –ø–æ–ª—É—á–µ–Ω:', !!approveReceipt);
        if ((approveReceipt as any).status !== 1) throw new Error('Approve transaction failed');

        console.log('‚úÖ EarnVG: VC —Ç–æ–∫–µ–Ω—ã approved');
      } catch (approveError: any) {
        console.error('‚ùå EarnVG: Approve failed:', approveError);
        console.error('‚ùå EarnVG: Approve error details:');
        console.error('  - message:', approveError.message);
        console.error('  - code:', approveError.code);
        console.error('  - data:', approveError.data);
        console.error('  - stack:', approveError.stack);
        
        if (approveError.message?.includes('user rejected')) {
          toast.error('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
        } else if (approveError.message?.includes('insufficient funds')) {
          toast.error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è approve');
        } else if (approveError.message?.includes('timeout')) {
          toast.error('Approve –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 60 —Å - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ MetaMask');
        } else if (approveError.message?.includes('execution reverted')) {
          toast.error('Approve –æ—Ç–∫–ª–æ–Ω—ë–Ω –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã');
        } else {
          toast.error(`–û—à–∏–±–∫–∞ approve: ${approveError.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
        }
        return;
      }

      const lpLockerWithSigner = lpLockerContract.connect(signer);

      toast.loading('–°–æ–∑–¥–∞–Ω–∏–µ LP –ø–æ–∑–∏—Ü–∏–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ VG —Ç–æ–∫–µ–Ω–æ–≤...');
      
      let finalSlippage = 1500; // 15%
      try {
        if (finalSlippage > maxSlippageBps) {
          finalSlippage = Number(maxSlippageBps);
          console.log(`‚ö†Ô∏è EarnVG: Slippage —Å–Ω–∏–∂–µ–Ω –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ: ${finalSlippage} BPS`);
        }
      } catch {
        console.log('‚ö†Ô∏è EarnVG: –ò—Å–ø–æ–ª—å–∑—É–µ–º default slippage');
      }

      console.log('üöÄ EarnVG: –í—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é earnVG');
      console.log(`–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: VC=${ethers.formatEther(vcAmountWei)}, BNB=${ethers.formatEther(bnbAmountWei)}, Slippage=${finalSlippage}BPS`);

      // Separate try-catch for transaction execution
      try {
        const tx = await (lpLockerWithSigner as any).earnVG(vcAmountWei, bnbAmountWei, finalSlippage, {
          value: bnbAmountWei,
          gasLimit: 500000,
        });
        
        console.log(`üìã EarnVG: Transaction Hash: ${tx.hash}`);
        toast.loading('–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');
        const receipt = await tx.wait();

        if (receipt.status === 1) {
          console.log('‚úÖ EarnVG: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
          console.log(`Gas used: ${receipt.gasUsed.toString()}`);
          
          // –ü–∞—Ä—Å–∏–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π
          try {
            const events = receipt.logs;
            console.log(`–°–æ–±—ã—Ç–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${events.length} —Å–æ–±—ã—Ç–∏–π`);
            
            // –ò—â–µ–º —Å–æ–±—ã—Ç–∏–µ VGEarned
            for (const event of events) {
              try {
                const decoded = lpLockerWithSigner.interface.parseLog(event);
                if (decoded && decoded.name === 'VGEarned') {
                  console.log(`üéâ VG Earned Event: user=${decoded.args.user}, vgAmount=${ethers.formatEther(decoded.args.vgAmount)} VG`);
                }
              } catch (e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –¥—Ä—É–≥–∏—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
              }
            }
          } catch (e) {
            console.log('‚ö†Ô∏è EarnVG: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–∞—Ä—Å–∏—Ç—å —Å–æ–±—ã—Ç–∏—è');
          }
          
          toast.success('VG —Ç–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã!');
          
          // Refresh data
          setTimeout(() => {
            fetchTokenData(true);
            refreshPoolInfo();
          }, 2000);

          setVcAmount('');
          setBnbAmount('');
        } else {
          throw new Error('Transaction failed');
        }
      } catch (txError: any) {
        console.error('‚ùå EarnVG Transaction Error:', txError);
        
        // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        if (txError.code) {
          console.error(`Error Code: ${txError.code}`);
        }
        if (txError.data) {
          console.error(`Error Data:`, txError.data);
        }
        if (txError.transaction) {
          console.error(`Transaction:`, txError.transaction);
        }
        
        if (txError.message?.includes('Too frequent transactions')) {
          console.error('üö´ MEV Protection –∞–∫—Ç–∏–≤–Ω–∞');
          toast.error('MEV Protection: –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏');
        } else if (txError.message?.includes('Slippage exceeded')) {
          console.error('üìà Slippage –ø—Ä–µ–≤—ã—à–µ–Ω');
          toast.error('Slippage –ø—Ä–µ–≤—ã—à–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
        } else if (txError.message?.includes('insufficient funds')) {
          console.error('üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
          toast.error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
        } else if (txError.message?.includes('user rejected')) {
          console.error('üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é');
          toast.error('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
        } else if (txError.message?.includes('VG vault empty') || txError.message?.includes('Insufficient VG')) {
          console.error('üè¶ –ü—Ä–æ–±–ª–µ–º–∞ —Å VG vault');
          toast.error('VG vault –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –Ω–∞–≥—Ä–∞–¥—ã');
        } else {
          console.error('‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', txError.message);
          toast.error(`–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${txError.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
        }
      }
    } catch (error: any) {
      console.error('‚ùå EarnVG Config Error:', error);
      
      // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      if (error.code) {
        console.error(`Config Error Code: ${error.code}`);
      }
      if (error.data) {
        console.error(`Config Error Data:`, error.data);
      }
      
      if (error.message?.includes('Config timeout') || error.message?.includes('Fallback timeout')) {
        console.error('‚è∞ Config timeout –ø—Ä–æ–∏–∑–æ—à—ë–ª');
        toast.error('Timeout –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      } else if (error.message?.includes('network')) {
        console.error('üåê –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é');
        toast.error('–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ç–∏ BSC');
      } else {
        console.error('‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error.message);
        toast.error(`–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      }
    } finally {
      setLoading(false);
    }
  };

  const handleLockLP = async () => {
    if (!signer || !account || !lpLockerContract) {
      toast.error('–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫');
      return;
    }

    if (!lpAmount) {
      toast.error('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ LP —Ç–æ–∫–µ–Ω–æ–≤');
      return;
    }

    const lpAmountWei = ethers.parseEther(lpAmount);

    if (parseFloat(balances.LP || '0') < parseFloat(lpAmount)) {
      toast.error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ LP —Ç–æ–∫–µ–Ω–æ–≤');
      return;
    }

    setLoading(true);

    try {
      const lpLockerWithSigner = lpLockerContract.connect(signer);

      // Check if user has LP tokens for locking
      if (mode === 'lock') {
        // –ü–æ–ª—É—á–∞–µ–º LP –∫–æ–Ω—Ç—Ä–∞–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const lpTokenContract = new ethers.Contract(CONTRACTS.LP_TOKEN, [
          "function balanceOf(address) view returns (uint256)",
          "function allowance(address owner, address spender) view returns (uint256)",
          "function approve(address spender, uint256 amount) returns (bool)"
        ], signer);
        
        const userLPBalance = await (lpTokenContract as any).balanceOf(account);
        if (userLPBalance < lpAmountWei) {
          toast.error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ LP —Ç–æ–∫–µ–Ω–æ–≤');
          return;
        }

        // Approve LP tokens to LP Locker contract
        const lpAllowance = await (lpTokenContract as any).allowance(account, CONTRACTS.LP_LOCKER);
        if (lpAllowance < lpAmountWei) {
          toast.loading('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ LP —Ç–æ–∫–µ–Ω–æ–≤...');
          const approveTx = await (lpTokenContract as any).approve(CONTRACTS.LP_LOCKER, lpAmountWei);
          await approveTx.wait();
        }

        // Lock LP tokens using LP Locker contract
        toast.loading('–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ LP —Ç–æ–∫–µ–Ω–æ–≤...');
        const tx = await (lpLockerWithSigner as any).lockLPTokens(lpAmountWei);
        const receipt = await tx.wait();

        if (receipt.status === 1) {
          toast.success('LP —Ç–æ–∫–µ–Ω—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!');
          fetchTokenData(true);
          setLpAmount('');
        }
      }
    } catch (error: any) {
      console.error('LockLP Error:', error);
      
      if (error.message?.includes('Too frequent transactions')) {
        toast.error('MEV Protection: –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏');
      } else if (error.message?.includes('insufficient funds')) {
        toast.error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
      } else if (error.message?.includes('user rejected')) {
        toast.error('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
      } else {
        toast.error(`–û—à–∏–±–∫–∞: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      }
    } finally {
      setLoading(false);
    }
  };

  // Utility functions
  const formatBalance = (balance: string): string => {
    const num = parseFloat(balance);
    if (num === 0) return '0';
    if (num < 0.001) return '<0.001';
    if (num < 1) return num.toFixed(4);
    if (num < 1000) return num.toFixed(2);
    if (num < 1000000) return `${(num / 1000).toFixed(1)}K`;
    return `${(num / 1000000).toFixed(1)}M`;
  };

  const calculateVGReward = (): string => {
    if (mode === 'create') {
      if (!vcAmount || !bnbAmount) return '0';
      try {
        const vcValue = parseFloat(vcAmount);
        const bnbValue = parseFloat(bnbAmount);
        
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–û–†–ú–£–õ–ê - —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º lpDivisor = 1e21 –∏ lpToVgRatio = 10 –∫–∞–∫ –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ
        const lpDivisor = 1e21; // 1000000000000000000000
        const lpToVgRatio = 10;  // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ª–æ–≥–æ–≤, –Ω–µ 15
        
        const lpAmount = (vcValue * bnbValue) / lpDivisor;
        const vgReward = lpAmount * lpToVgRatio;
        
        return vgReward.toFixed(2);
      } catch {
        return '0';
      }
    } else {
      if (!lpAmount) return '0';
      try {
        const lpValue = parseFloat(lpAmount);
        const lpToVgRatio = 10; // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 
        const vgReward = lpValue * lpToVgRatio;
        return vgReward.toFixed(2);
      } catch {
        return '0';
      }
    }
  };

  const refreshAllData = async () => {
    console.log('EarnVGWidget: Manual refresh triggered');
    await fetchTokenData(true);
    await refreshPoolInfo();
  };

  if (!isConnected) {
    return (
      <div className={`bg-gradient-to-br from-slate-800/80 to-slate-900/80 backdrop-blur-sm border border-slate-600/50 rounded-xl p-6 shadow-xl ${className}`}>
        <div className="text-center">
          <Wallet className="h-16 w-16 text-blue-400 mb-6 mx-auto" />
          <h3 className="text-xl font-bold text-white mb-3">–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫</h3>
          <p className="text-gray-300">
            –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è LP Staking –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å MetaMask
          </p>
        </div>
      </div>
    );
  }

  return (
    <div className={`bg-gradient-to-br from-slate-800/80 to-slate-900/80 backdrop-blur-sm border border-slate-600/50 rounded-xl p-6 shadow-xl ${className}`}>
      {/* Header */}
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center gap-3">
          <div className="p-2 rounded-lg bg-gradient-to-r from-blue-500/30 to-purple-500/30">
            <Zap className="h-6 w-6 text-blue-400" />
          </div>
          <div>
            <h3 className="text-xl font-bold text-white">‚ö° –ü–æ–ª—É—á–∏—Ç—å VG —Ç–æ–∫–µ–Ω—ã</h3>
            <p className="text-gray-300 text-sm">
              {mode === 'create' 
                ? '–°–æ–∑–¥–∞–π—Ç–µ LP –ø–æ–∑–∏—Ü–∏—é –∏ –ø–æ–ª—É—á–∏—Ç–µ VG (15:1)'
                : '–ó–∞–±–ª–æ–∫–∏—Ä—É–π—Ç–µ LP —Ç–æ–∫–µ–Ω—ã –∏ –ø–æ–ª—É—á–∏—Ç–µ VG (15:1)'
              }
            </p>
          </div>
        </div>
        <div className="flex items-center gap-2">
          {/* Fix RPC Button */}
          <button
            onClick={updateBSCTestnetRPC}
            className="px-3 py-2 text-xs bg-red-500/20 hover:bg-red-500/30 border border-red-500/50 rounded-lg text-red-400 hover:text-red-300 transition-colors"
            title="–ò—Å–ø—Ä–∞–≤–∏—Ç—å RPC endpoints –µ—Å–ª–∏ –µ—Å—Ç—å timeout –æ—à–∏–±–∫–∏"
          >
            Fix RPC
          </button>
          {/* Refresh Button */}
          <button
            onClick={refreshAllData}
            disabled={poolLoading}
            className="p-2 text-blue-400 hover:text-blue-300 transition-colors"
          >
            <RefreshCw className={cn("h-5 w-5", poolLoading && "animate-spin")} />
          </button>
        </div>
      </div>

      {/* Mode Switcher */}
      <div className="flex rounded-xl bg-black/40 p-1 border border-gray-600/50 mb-6">
        <button
          onClick={() => setMode('create')}
          className={cn(
            'flex-1 px-4 py-3 text-sm font-medium rounded-lg transition-all duration-200',
            mode === 'create'
              ? 'bg-gradient-to-r from-blue-500 to-purple-500 text-white shadow-lg'
              : 'text-gray-300 hover:text-white hover:bg-gray-700/50'
          )}
        >
          Create LP
        </button>
        <button
          onClick={() => setMode('lock')}
          className={cn(
            'flex-1 px-4 py-3 text-sm font-medium rounded-lg transition-all duration-200',
            mode === 'lock'
              ? 'bg-gradient-to-r from-blue-500 to-purple-500 text-white shadow-lg'
              : 'text-gray-300 hover:text-white hover:bg-gray-700/50'
          )}
        >
          Lock LP Tokens
        </button>
      </div>

      {/* Balances */}
      <div className="grid grid-cols-2 gap-4 mb-6">
        {mode === 'create' ? (
          <>
            <div className="text-center p-4 rounded-lg bg-black/30 border border-gray-600/50">
              <div className="text-sm text-gray-400 mb-1">VC Balance</div>
              <div className="text-xl font-bold text-blue-400">
                {balancesLoading ? (
                  <div className="animate-pulse bg-gray-600 h-6 w-16 rounded mx-auto"></div>
                ) : (
                  formatBalance(balances.VC || '0')
                )}
              </div>
            </div>
            <div className="text-center p-4 rounded-lg bg-black/30 border border-gray-600/50">
              <div className="text-sm text-gray-400 mb-1">BNB Balance</div>
              <div className="text-xl font-bold text-amber-400">
                {balancesLoading ? (
                  <div className="animate-pulse bg-gray-600 h-6 w-16 rounded mx-auto"></div>
                ) : (
                  formatBalance(balances.BNB || '0')
                )}
              </div>
            </div>
          </>
        ) : (
          <>
            <div className="text-center p-4 rounded-lg bg-black/30 border border-gray-600/50">
              <div className="text-sm text-gray-400 mb-1">LP Balance</div>
              <div className="text-xl font-bold text-purple-400">
                {balancesLoading ? (
                  <div className="animate-pulse bg-gray-600 h-6 w-16 rounded mx-auto"></div>
                ) : (
                  formatBalance(balances.LP || '0')
                )}
              </div>
            </div>
            <div className="text-center p-4 rounded-lg bg-black/30 border border-gray-600/50">
              <div className="text-sm text-gray-400 mb-1">VG Balance</div>
              <div className="text-xl font-bold text-green-400">
                {balancesLoading ? (
                  <div className="animate-pulse bg-gray-600 h-6 w-16 rounded mx-auto"></div>
                ) : (
                  formatBalance(balances.VG || '0')
                )}
              </div>
            </div>
          </>
        )}
      </div>

      {/* Pool Information */}
      {mode === 'create' && (
        <div className="bg-gradient-to-r from-blue-500/10 to-purple-500/10 rounded-xl p-4 border border-blue-500/30 mb-6">
          <div className="flex items-center justify-between mb-3">
            <span className="text-sm font-medium text-white flex items-center gap-2">
              <Info className="w-4 h-4 text-blue-400" />
              Pool Information
            </span>
            {!poolInfo.isLoaded && (
              <div className="flex items-center gap-1 text-xs text-amber-400">
                <AlertCircle className="w-3 h-3" />
                Fallback
              </div>
            )}
          </div>
          <div className="grid grid-cols-2 gap-4 text-sm">
            <div>
              <div className="text-gray-400 mb-1">VC Reserve</div>
              <div className="font-medium text-white">
                {poolLoading ? (
                  <div className="animate-pulse bg-gray-600 h-4 w-16 rounded"></div>
                ) : (
                  formatBalance(poolInfo.vcReserve)
                )}
              </div>
            </div>
            <div>
              <div className="text-gray-400 mb-1">BNB Reserve</div>
              <div className="font-medium text-white">
                {poolLoading ? (
                  <div className="animate-pulse bg-gray-600 h-4 w-16 rounded"></div>
                ) : (
                  formatBalance(poolInfo.bnbReserve)
                )}
              </div>
            </div>
          </div>
          <div className="mt-3 pt-3 border-t border-blue-500/30">
            <div className="text-xs text-gray-400">Current Price</div>
            <div className="text-sm font-medium text-green-400">
              {poolLoading ? (
                <div className="animate-pulse bg-gray-600 h-4 w-24 rounded"></div>
              ) : (
                `1 VC = ${poolInfo.price} BNB`
              )}
            </div>
          </div>
        </div>
      )}

      {/* Input Fields */}
      <div className="space-y-4 mb-6">
        {mode === 'create' ? (
          <>
            <div>
              <label className="block text-sm font-medium text-white mb-2">VC Amount</label>
              <div className="relative">
                <div className="absolute left-3 top-1/2 transform -translate-y-1/2">
                  <Coins className="h-4 w-4 text-blue-400" />
                </div>
                <input
                  type="number"
                  placeholder="Enter VC amount"
                  value={vcAmount}
                  onChange={(e) => setVcAmount(e.target.value)}
                  disabled={loading}
                  className="w-full pl-10 pr-4 py-3 bg-black/40 border border-gray-600/50 rounded-lg text-white placeholder-gray-400 focus:border-blue-400 focus:ring-1 focus:ring-blue-400 transition-colors"
                />
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-white mb-2">BNB Amount (Auto-calculated)</label>
              <div className="relative">
                <div className="absolute left-3 top-1/2 transform -translate-y-1/2">
                  <Coins className="h-4 w-4 text-amber-400" />
                </div>
                <input
                  type="number"
                  placeholder={poolInfo.isLoaded ? "Auto-calculated from VC" : "Using fallback ratio"}
                  value={bnbAmount}
                  onChange={(e) => setBnbAmount(e.target.value)}
                  disabled={loading}
                  className="w-full pl-10 pr-4 py-3 bg-black/40 border border-gray-600/50 rounded-lg text-white placeholder-gray-400 focus:border-amber-400 focus:ring-1 focus:ring-amber-400 transition-colors"
                />
              </div>
            </div>
          </>
        ) : (
          <div>
            <label className="block text-sm font-medium text-white mb-2">LP Token Amount</label>
            <div className="relative">
              <div className="absolute left-3 top-1/2 transform -translate-y-1/2">
                <Coins className="h-4 w-4 text-purple-400" />
              </div>
              <input
                type="number"
                placeholder="Enter LP token amount"
                value={lpAmount}
                onChange={(e) => setLpAmount(e.target.value)}
                disabled={loading}
                className="w-full pl-10 pr-4 py-3 bg-black/40 border border-gray-600/50 rounded-lg text-white placeholder-gray-400 focus:border-purple-400 focus:ring-1 focus:ring-purple-400 transition-colors"
              />
            </div>
          </div>
        )}
      </div>

      {/* VG Reward Preview */}
      {((mode === 'create' && vcAmount && bnbAmount) || (mode === 'lock' && lpAmount)) && (
        <div className="rounded-xl bg-gradient-to-r from-green-500/20 to-blue-500/20 border border-green-500/40 p-4 mb-6">
          <div className="flex items-center justify-between">
            <span className="text-sm text-white flex items-center gap-2">
              <TrendingUp className="w-4 h-4 text-green-400" />
              Expected VG Reward:
            </span>
            <span className="text-xl font-bold text-green-400">
              {calculateVGReward()} VG
            </span>
          </div>
        </div>
      )}

      {/* Allowance Check Button */}
      {mode === 'create' && (
        <div className="mb-4">
          <button
            onClick={checkCurrentAllowance}
            disabled={checkingAllowance}
            className="w-full h-10 text-sm font-medium rounded-lg transition-all duration-200 bg-gray-700 hover:bg-gray-600 text-white disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2"
          >
            {checkingAllowance ? (
              <>
                <RefreshCw className="h-4 w-4 animate-spin" />
                –ü—Ä–æ–≤–µ—Ä—è–µ–º allowance...
              </>
            ) : (
              <>
                <Info className="h-4 w-4" />
                –ü—Ä–æ–≤–µ—Ä–∏—Ç—å VC Allowance ({formatBalance(currentAllowance)} VC)
              </>
            )}
          </button>
        </div>
      )}

      {/* Action Button */}
      <button
        onClick={mode === 'create' ? handleEarnVG : handleLockLP}
        disabled={
          loading || 
          (mode === 'create' && (!vcAmount || !bnbAmount)) ||
          (mode === 'lock' && !lpAmount)
        }
        className={cn(
          "w-full h-12 text-base font-semibold rounded-lg transition-all duration-200 shadow-lg disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2",
          "bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600 text-white"
        )}
      >
        {loading ? (
          <>
            <RefreshCw className="h-5 w-5 animate-spin" />
            Processing...
          </>
        ) : (
          <>
            <Zap className="h-5 w-5" />
            {mode === 'create' ? 'Create LP + Earn VG' : 'Lock LP + Earn VG'}
          </>
        )}
      </button>

      {/* Information */}
      <div className="mt-6 space-y-2 bg-black/20 rounded-lg p-4 border border-gray-600/30">
        <div className="font-medium text-white mb-3">Important Information:</div>
        <div className="text-sm text-gray-300 space-y-1">
          <div>‚Ä¢ LP —Ç–æ–∫–µ–Ω—ã –±–ª–æ–∫–∏—Ä—É—é—Ç—Å—è –Ω–∞–≤—Å–µ–≥–¥–∞ (permanent lock)</div>
          <div>‚Ä¢ –ü–æ–ª—É—á–∞–µ—Ç–µ 15 VG –∑–∞ –∫–∞–∂–¥—ã–π 1 LP —Ç–æ–∫–µ–Ω (–º–≥–Ω–æ–≤–µ–Ω–Ω–æ)</div>
          <div>‚Ä¢ VG —Ç–æ–∫–µ–Ω—ã –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è governance</div>
          <div>‚Ä¢ –≠—Ç–æ –ù–ï —Å—Ç–µ–π–∫–∏–Ω–≥ - LP –Ω–µ–ª—å–∑—è –∑–∞–±—Ä–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ</div>
          {mode === 'lock' && (
            <div>‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –≥–æ—Ç–æ–≤—ã–µ LP —Ç–æ–∫–µ–Ω—ã VC/BNB</div>
          )}
        </div>
      </div>
    </div>
  );
};

export default EarnVGWidget; 