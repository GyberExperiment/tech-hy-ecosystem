import React, { useState, useEffect, useMemo } from 'react';
import { ethers } from 'ethers';
import { useWeb3 } from '../contexts/Web3Context';
import { CONTRACTS } from '../constants/contracts';
import { toast } from 'react-hot-toast';
import { Coins, Zap, TrendingUp, Wallet, Info, RefreshCw, AlertCircle } from 'lucide-react';
import { cn } from '@/utils/cn';
import { useTokenData } from '../hooks/useTokenData';
import { usePoolInfo } from '../hooks/usePoolInfo';

// Fallback RPC providers for config() calls
const FALLBACK_RPC_URLS = [
  'https://bsc-testnet-rpc.publicnode.com',
  'https://data-seed-prebsc-1-s1.binance.org:8545',
  'https://data-seed-prebsc-2-s1.binance.org:8545',
  'https://bsc-testnet.public.blastapi.io',
  'https://endpoints.omniatech.io/v1/bsc/testnet/public'
];

const LPLOCKER_ABI = [
  "function config() external view returns (address authority, address vgTokenAddress, address vcTokenAddress, address pancakeRouter, address lpTokenAddress, address stakingVaultAddress, uint256 lpDivisor, uint256 lpToVgRatio, uint256 minBnbAmount, uint256 minVcAmount, uint16 maxSlippageBps, uint16 defaultSlippageBps, bool mevProtectionEnabled, uint256 minTimeBetweenTxs, uint8 maxTxPerUserPerBlock, uint256 totalLockedLp, uint256 totalVgIssued, uint256 totalVgDeposited)",
  "function owner() external view returns (address)"
];

interface EarnVGWidgetProps {
  className?: string;
}

/**
 * Fallback function to call config() with JsonRpcProvider when BrowserProvider fails
 */
async function tryConfigWithFallback(lpLockerAddress: string): Promise<any> {
  console.log('üîÑ EarnVG: Trying config() with fallback RPC providers...');
  
  for (const rpcUrl of FALLBACK_RPC_URLS) {
    try {
      console.log(`üåê EarnVG: Trying RPC: ${rpcUrl}`);
      
      const provider = new ethers.JsonRpcProvider(rpcUrl);
      const contract = new ethers.Contract(lpLockerAddress, LPLOCKER_ABI, provider);
      
      const startTime = Date.now();
      const config = await Promise.race([
        contract.config?.() || Promise.reject(new Error('Config method not available')),
        new Promise((_, reject) => 
          setTimeout(() => reject(new Error('Fallback timeout')), 10000)
        )
      ]);
      
      const elapsed = Date.now() - startTime;
      console.log(`‚úÖ EarnVG: Fallback config() successful with ${rpcUrl} (${elapsed}ms)`);
      
      return config;
    } catch (error) {
      console.log(`‚ùå EarnVG: Fallback failed with ${rpcUrl}:`, error);
      continue;
    }
  }
  
  throw new Error('All fallback RPC providers failed');
}

const EarnVGWidget: React.FC<EarnVGWidgetProps> = ({ className = '' }) => {
  const { account, signer, isConnected, isCorrectNetwork, provider, vcContract, lpLockerContract, vgContract } = useWeb3();
  
  // Use centralized hooks
  const { balances, loading: balancesLoading, fetchTokenData } = useTokenData();
  const { poolInfo, loading: poolLoading, refreshPoolInfo } = usePoolInfo();
  
  // State management
  const [loading, setLoading] = useState(false);
  const [mode, setMode] = useState<'create' | 'lock'>('create');
  const [vcAmount, setVcAmount] = useState('');
  const [bnbAmount, setBnbAmount] = useState('');
  const [lpAmount, setLpAmount] = useState('');
  
  // Memoized calculations
  const calculatedBnbAmount = useMemo(() => {
    if (!vcAmount || !poolInfo.isLoaded || poolInfo.vcReserve === '0' || poolInfo.bnbReserve === '0') {
      return '';
    }
    
    try {
      const vcValue = parseFloat(vcAmount);
      if (isNaN(vcValue) || vcValue <= 0) return '';
      
      const ratio = parseFloat(poolInfo.bnbReserve) / parseFloat(poolInfo.vcReserve);
      const calculatedBnb = (vcValue * ratio).toFixed(6);
      
      console.log(`EarnVGWidget: Auto-calc BNB: ${vcValue} VC * ${ratio.toFixed(8)} = ${calculatedBnb} BNB`);
      return calculatedBnb;
    } catch (error) {
      console.error('EarnVGWidget: Error calculating BNB amount:', error);
      return '';
    }
  }, [vcAmount, poolInfo]);

  // Auto-update BNB amount when VC changes
  useEffect(() => {
    if (calculatedBnbAmount && calculatedBnbAmount !== bnbAmount) {
      setBnbAmount(calculatedBnbAmount);
    }
  }, [calculatedBnbAmount]);

  // Transaction handlers
  const handleEarnVG = async () => {
    console.log('üéØ EarnVG: –ù–∞—á–∞–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–∏');
    
    if (!signer || !account || !vcContract || !lpLockerContract) {
      const missingItems = [];
      if (!signer) missingItems.push('signer');
      if (!account) missingItems.push('account');
      if (!vcContract) missingItems.push('vcContract');
      if (!lpLockerContract) missingItems.push('lpLockerContract');
      
      console.error('‚ùå EarnVG: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:', missingItems.join(', '));
      toast.error('–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫');
      return;
    }

    if (!vcAmount || !bnbAmount) {
      console.error('‚ùå EarnVG: –ù–µ —É–∫–∞–∑–∞–Ω—ã —Å—É–º–º—ã', { vcAmount, bnbAmount });
      toast.error('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ VC –∏ BNB');
      return;
    }

    const vcAmountWei = ethers.parseEther(vcAmount);
    const bnbAmountWei = ethers.parseEther(bnbAmount);

    console.log('üí∞ EarnVG: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    console.log(`–¢—Ä–µ–±—É–µ—Ç—Å—è VC: ${vcAmount}, –¥–æ—Å—Ç—É–ø–Ω–æ: ${balances.VC || '0'}`);
    console.log(`–¢—Ä–µ–±—É–µ—Ç—Å—è BNB: ${bnbAmount}, –¥–æ—Å—Ç—É–ø–Ω–æ: ${balances.BNB || '0'}`);

    if (parseFloat(balances.VC || '0') < parseFloat(vcAmount)) {
      console.error('‚ùå EarnVG: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ VC —Ç–æ–∫–µ–Ω–æ–≤');
      toast.error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ VC —Ç–æ–∫–µ–Ω–æ–≤');
      return;
    }

    if (parseFloat(balances.BNB || '0') < parseFloat(bnbAmount)) {
      console.error('‚ùå EarnVG: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ BNB');
      toast.error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ BNB');
      return;
    }

    setLoading(true);
    
    try {
      console.log('üîç EarnVG: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞');
      
      // –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Web3 —Å–æ—Å—Ç–æ—è–Ω–∏—è
      console.log('üîß EarnVG: Web3 State Diagnosis...');
      console.log('account:', account);
      console.log('isConnected:', isConnected);
      console.log('isCorrectNetwork:', isCorrectNetwork);
      console.log('signer:', signer);
      console.log('provider:', provider);
      console.log('lpLockerContract:', lpLockerContract);
      
      if (!lpLockerContract) {
        console.error('‚ùå EarnVG: lpLockerContract is null/undefined');
        toast.error('LP Locker –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        return;
      }
      
      console.log('üîß EarnVG: Contract details...');
      console.log('Contract target:', lpLockerContract.target);
      console.log('Contract runner:', lpLockerContract.runner);
      console.log('Contract runner type:', typeof lpLockerContract.runner);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
      const contractProvider = lpLockerContract.runner?.provider;
      console.log('üåê EarnVG: Contract provider:', contractProvider);
      console.log('Contract provider type:', typeof contractProvider);
      
      if (!contractProvider) {
        console.error('‚ùå EarnVG: Contract provider is null/undefined');
        toast.error('–ü—Ä–æ–≤–∞–π–¥–µ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        return;
      }
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –≤—ã–∑–æ–≤ —Å–Ω–∞—á–∞–ª–∞ —Å read-only –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º
      console.log('üß™ EarnVG: Testing with read-only contract...');
      
      let readOnlyContract: ethers.Contract;
      try {
        // –°–æ–∑–¥–∞–µ–º read-only –∫–æ–Ω—Ç—Ä–∞–∫—Ç –¥–ª—è view —Ñ—É–Ω–∫—Ü–∏–π
        const readOnlyProvider = new ethers.JsonRpcProvider('https://bsc-testnet-rpc.publicnode.com');
        readOnlyContract = new ethers.Contract(CONTRACTS.LP_LOCKER, LPLOCKER_ABI, readOnlyProvider);
        console.log('‚úÖ EarnVG: Read-only contract created');
      } catch (providerError) {
        console.error('‚ùå EarnVG: Failed to create read-only contract:', providerError);
        toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å read-only –∫–æ–Ω—Ç—Ä–∞–∫—Ç');
        return;
      }
      
      try {
        const ownerStartTime = Date.now();
        const owner = await (readOnlyContract as any).owner();
        const ownerTime = Date.now() - ownerStartTime;
        console.log(`‚úÖ EarnVG: owner() successful in ${ownerTime}ms:`, owner);
      } catch (ownerError) {
        console.error('‚ùå EarnVG: owner() failed:', ownerError);
        toast.error('–ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è');
        return;
      }
      
      // –¢–µ–ø–µ—Ä—å –ø—Ä–æ–±—É–µ–º config() —Å read-only –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º
      console.log('üìû EarnVG: Attempting config() call with read-only contract...');
      console.log('üìû EarnVG: Current time:', new Date().toISOString());
      
      let config: any;
      
      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º read-only –∫–æ–Ω—Ç—Ä–∞–∫—Ç –¥–ª—è config()
        console.log('üîÑ EarnVG: Trying config() with read-only contract...');
        const configStartTime = Date.now();
        
        // –°–æ–∑–¥–∞—ë–º timeout, –∫–æ—Ç–æ—Ä—ã–π –æ—á–∏—Å—Ç–∏–º –ø—Ä–∏ —É—Å–ø–µ—Ö–µ, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç—å –ª–æ–∂–Ω—ã–π reject
        let timeoutId: ReturnType<typeof setTimeout>;
        const timeoutPromise = new Promise((_, reject) => {
          timeoutId = setTimeout(() => {
            const elapsed = Date.now() - configStartTime;
            console.log(`‚è∞ EarnVG: Read-only config() timeout after ${elapsed}ms`);
            reject(new Error('Read-only config timeout after 10 seconds'));
          }, 10000);
        });

        const configPromise = (readOnlyContract as any).config();

        config = await Promise.race([configPromise, timeoutPromise]);
        // –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ ‚Äì configPromise —Å—Ä–∞–±–æ—Ç–∞–ª —Ä–∞–Ω—å—à–µ, –æ—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª–æ–∂–Ω—ã—Ö —Ç–∞–π–º–∞—É—Ç–æ–≤
        clearTimeout(timeoutId!);
        const configTime = Date.now() - configStartTime;
        console.log(`‚úÖ EarnVG: Read-only config() successful in ${configTime}ms`);
        
      } catch (readOnlyError: unknown) {
        const errorMessage = readOnlyError instanceof Error ? readOnlyError.message : 'Unknown error';
        console.log('‚ö†Ô∏è EarnVG: Read-only config() failed, trying fallback...', errorMessage);
        
        // Fallback –∫ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º RPC
        try {
          config = await tryConfigWithFallback(CONTRACTS.LP_LOCKER);
        } catch (fallbackError) {
          console.error('‚ùå EarnVG: All config() attempts failed:', fallbackError);
          toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞');
          return;
        }
      }
      
      console.log('üìä EarnVG: Config result type:', typeof config);
      console.log('üìä EarnVG: Config result:', config);
      
      // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π config
      console.log('üîç EarnVG: –ê–Ω–∞–ª–∏–∑ –ø–æ–ª–µ–π config...');
      console.log('Config tuple:', config);
      
      // config() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ —Å–æ–≥–ª–∞—Å–Ω–æ ABI
      const stakingVault = config.stakingVaultAddress;
      const maxSlippageBps = config.maxSlippageBps;
      const mevEnabled = config.mevProtectionEnabled;
      
      console.log(`‚úÖ EarnVG: –ü–æ–ª—è –∏–∑–≤–ª–µ—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ`);
      console.log(`Staking Vault: ${stakingVault}`);
      console.log(`Max Slippage: ${maxSlippageBps} BPS (${(Number(maxSlippageBps) / 100).toFixed(1)}%)`);
      console.log(`MEV Protection: ${mevEnabled}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º VG –±–∞–ª–∞–Ω—Å vault'–∞ —Å read-only –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º
      if (!vgContract) {
        console.error('‚ùå EarnVG: VG –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        toast.error('VG –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        return;
      }
      
      console.log('üí∞ EarnVG: –ü—Ä–æ–≤–µ—Ä—è–µ–º VG –±–∞–ª–∞–Ω—Å vault...');
      
      let vaultVGBalance: bigint;
      try {
        // –°–æ–∑–¥–∞–µ–º read-only VG –∫–æ–Ω—Ç—Ä–∞–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ (–ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º provider)
        const readOnlyVGContract = new ethers.Contract(CONTRACTS.VG_TOKEN, [
          "function balanceOf(address) view returns (uint256)"
        ], readOnlyContract.runner); // –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ provider
        
        vaultVGBalance = await (readOnlyVGContract as any).balanceOf(stakingVault);
        console.log(`VG –±–∞–ª–∞–Ω—Å vault'–∞: ${ethers.formatEther(vaultVGBalance)} VG`);
      } catch (balanceError) {
        console.error('‚ùå EarnVG: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å VG –±–∞–ª–∞–Ω—Å vault:', balanceError);
        toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å VG –±–∞–ª–∞–Ω—Å vault');
        return;
      }
      
      if (vaultVGBalance === 0n) {
        console.error('‚ùå EarnVG: VG vault –ø—É—Å—Ç–æ–π - –Ω–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –Ω–∞–≥—Ä–∞–¥');
        toast.error('VG vault –ø—É—Å—Ç–æ–π - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
        return;
      }
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–µ–º—É—é –Ω–∞–≥—Ä–∞–¥—É
      console.log('üßÆ EarnVG: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–µ–º—É—é –Ω–∞–≥—Ä–∞–¥—É...');
      const lpDivisor = config.lpDivisor;
      const lpToVgRatio = config.lpToVgRatio;
      
      console.log(`LP Divisor: ${lpDivisor.toString()}`);
      console.log(`LP to VG Ratio: ${lpToVgRatio.toString()}`);
      
      const expectedLp = (vcAmountWei * bnbAmountWei) / lpDivisor;
      const expectedVGReward = expectedLp * BigInt(lpToVgRatio);
      
      console.log(`–û–∂–∏–¥–∞–µ–º–∞—è LP: ${ethers.formatEther(expectedLp)} LP`);
      console.log(`–û–∂–∏–¥–∞–µ–º–∞—è VG –Ω–∞–≥—Ä–∞–¥–∞: ${ethers.formatEther(expectedVGReward)} VG`);
      
      if (vaultVGBalance < expectedVGReward) {
        console.error('‚ùå EarnVG: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ VG –≤ vault –¥–ª—è –Ω–∞–≥—Ä–∞–¥—ã');
        toast.error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ VG –≤ vault. –ù—É–∂–Ω–æ: ${ethers.formatEther(expectedVGReward)}, –¥–æ—Å—Ç—É–ø–Ω–æ: ${ethers.formatEther(vaultVGBalance)}`);
        return;
      }

      console.log('üîê EarnVG: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ approve VC —Ç–æ–∫–µ–Ω–æ–≤');
      
      // Check allowance with read-only contract (reuse the same provider)
      let allowance: bigint;
      try {
        const readOnlyVCContract = new ethers.Contract(CONTRACTS.VC_TOKEN, [
          "function allowance(address owner, address spender) view returns (uint256)",
          "function approve(address spender, uint256 amount) returns (bool)"
        ], readOnlyContract.runner); // –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ provider
        
        allowance = await (readOnlyVCContract as any).allowance(account, CONTRACTS.LP_LOCKER);
        console.log(`–¢–µ–∫—É—â–∏–π VC allowance: ${ethers.formatEther(allowance)} VC`);
      } catch (allowanceError) {
        console.error('‚ùå EarnVG: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å allowance:', allowanceError);
        toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å allowance');
        return;
      }
      
      // Separate try-catch for approve operations
      try {
        // –ü–æ–≤—Ç–æ—Ä–Ω–æ —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ MetaMask –≥–æ—Ç–æ–≤ –ø–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ (–∏–Ω–æ–≥–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å)
        await (window as any).ethereum?.request?.({ method: 'eth_requestAccounts' });

        const vcContractWithSigner = vcContract.connect(signer);
        const MAX_UINT256 = (2n ** 256n - 1n).toString();

        let gasLimitOverride: bigint | undefined;
        try {
          const gasFn = (vcContractWithSigner as any).estimateGas?.approve;
          if (gasFn) {
            const est: bigint = await gasFn(CONTRACTS.LP_LOCKER, MAX_UINT256);
            gasLimitOverride = (est * 120n) / 100n; // +20 %
          }
        } catch {}

        const approveTx = await (vcContractWithSigner as any).approve(
          CONTRACTS.LP_LOCKER,
          MAX_UINT256,
          gasLimitOverride ? { gasLimit: gasLimitOverride } : {}
        );

        console.log(`üìã EarnVG: Approve TX hash: ${approveTx.hash}`);

        const approveReceipt = await Promise.race([
          approveTx.wait(),
          new Promise((_, reject) => setTimeout(() => reject(new Error('Approve transaction timeout after 60s')), 60000))
        ]);

        if ((approveReceipt as any).status !== 1) throw new Error('Approve transaction failed');

        console.log('‚úÖ EarnVG: VC —Ç–æ–∫–µ–Ω—ã approved');
      } catch (approveError: any) {
        console.error('‚ùå EarnVG: Approve failed:', approveError);
        if (approveError.message?.includes('user rejected')) {
          toast.error('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
        } else if (approveError.message?.includes('insufficient funds')) {
          toast.error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è approve');
        } else if (approveError.message?.includes('timeout')) {
          toast.error('Approve –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 60 —Å');
        } else {
          toast.error(`–û—à–∏–±–∫–∞ approve: ${approveError.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
        }
        return;
      }

      const lpLockerWithSigner = lpLockerContract.connect(signer);

      toast.loading('–°–æ–∑–¥–∞–Ω–∏–µ LP –ø–æ–∑–∏—Ü–∏–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ VG —Ç–æ–∫–µ–Ω–æ–≤...');
      
      let finalSlippage = 1500; // 15%
      try {
        if (finalSlippage > maxSlippageBps) {
          finalSlippage = Number(maxSlippageBps);
          console.log(`‚ö†Ô∏è EarnVG: Slippage —Å–Ω–∏–∂–µ–Ω –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ: ${finalSlippage} BPS`);
        }
      } catch {
        console.log('‚ö†Ô∏è EarnVG: –ò—Å–ø–æ–ª—å–∑—É–µ–º default slippage');
      }

      console.log('üöÄ EarnVG: –í—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é earnVG');
      console.log(`–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: VC=${ethers.formatEther(vcAmountWei)}, BNB=${ethers.formatEther(bnbAmountWei)}, Slippage=${finalSlippage}BPS`);

      // Separate try-catch for transaction execution
      try {
        const tx = await (lpLockerWithSigner as any).earnVG(vcAmountWei, bnbAmountWei, finalSlippage, {
          value: bnbAmountWei,
          gasLimit: 500000,
        });
        
        console.log(`üìã EarnVG: Transaction Hash: ${tx.hash}`);
        toast.loading('–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');
        const receipt = await tx.wait();

        if (receipt.status === 1) {
          console.log('‚úÖ EarnVG: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
          console.log(`Gas used: ${receipt.gasUsed.toString()}`);
          
          // –ü–∞—Ä—Å–∏–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π
          try {
            const events = receipt.logs;
            console.log(`–°–æ–±—ã—Ç–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${events.length} —Å–æ–±—ã—Ç–∏–π`);
            
            // –ò—â–µ–º —Å–æ–±—ã—Ç–∏–µ VGEarned
            for (const event of events) {
              try {
                const decoded = lpLockerWithSigner.interface.parseLog(event);
                if (decoded && decoded.name === 'VGEarned') {
                  console.log(`üéâ VG Earned Event: user=${decoded.args.user}, vgAmount=${ethers.formatEther(decoded.args.vgAmount)} VG`);
                }
              } catch (e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –¥—Ä—É–≥–∏—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
              }
            }
          } catch (e) {
            console.log('‚ö†Ô∏è EarnVG: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–∞—Ä—Å–∏—Ç—å —Å–æ–±—ã—Ç–∏—è');
          }
          
          toast.success('VG —Ç–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã!');
          
          // Refresh data
          setTimeout(() => {
            fetchTokenData(true);
            refreshPoolInfo();
          }, 2000);

          setVcAmount('');
          setBnbAmount('');
        } else {
          throw new Error('Transaction failed');
        }
      } catch (txError: any) {
        console.error('‚ùå EarnVG Transaction Error:', txError);
        
        // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        if (txError.code) {
          console.error(`Error Code: ${txError.code}`);
        }
        if (txError.data) {
          console.error(`Error Data:`, txError.data);
        }
        if (txError.transaction) {
          console.error(`Transaction:`, txError.transaction);
        }
        
        if (txError.message?.includes('Too frequent transactions')) {
          console.error('üö´ MEV Protection –∞–∫—Ç–∏–≤–Ω–∞');
          toast.error('MEV Protection: –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏');
        } else if (txError.message?.includes('Slippage exceeded')) {
          console.error('üìà Slippage –ø—Ä–µ–≤—ã—à–µ–Ω');
          toast.error('Slippage –ø—Ä–µ–≤—ã—à–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
        } else if (txError.message?.includes('insufficient funds')) {
          console.error('üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
          toast.error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
        } else if (txError.message?.includes('user rejected')) {
          console.error('üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é');
          toast.error('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
        } else if (txError.message?.includes('VG vault empty') || txError.message?.includes('Insufficient VG')) {
          console.error('üè¶ –ü—Ä–æ–±–ª–µ–º–∞ —Å VG vault');
          toast.error('VG vault –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –Ω–∞–≥—Ä–∞–¥—ã');
        } else {
          console.error('‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', txError.message);
          toast.error(`–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${txError.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
        }
      }
    } catch (error: any) {
      console.error('‚ùå EarnVG Config Error:', error);
      
      // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      if (error.code) {
        console.error(`Config Error Code: ${error.code}`);
      }
      if (error.data) {
        console.error(`Config Error Data:`, error.data);
      }
      
      if (error.message?.includes('Config timeout') || error.message?.includes('Fallback timeout')) {
        console.error('‚è∞ Config timeout –ø—Ä–æ–∏–∑–æ—à—ë–ª');
        toast.error('Timeout –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      } else if (error.message?.includes('network')) {
        console.error('üåê –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é');
        toast.error('–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ç–∏ BSC');
      } else {
        console.error('‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error.message);
        toast.error(`–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      }
    } finally {
      setLoading(false);
    }
  };

  const handleLockLP = async () => {
    if (!signer || !account || !lpLockerContract) {
      toast.error('–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫');
      return;
    }

    if (!lpAmount) {
      toast.error('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ LP —Ç–æ–∫–µ–Ω–æ–≤');
      return;
    }

    const lpAmountWei = ethers.parseEther(lpAmount);

    if (parseFloat(balances.LP || '0') < parseFloat(lpAmount)) {
      toast.error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ LP —Ç–æ–∫–µ–Ω–æ–≤');
      return;
    }

    setLoading(true);

    try {
      const lpLockerWithSigner = lpLockerContract.connect(signer);

      // Check if user has LP tokens for locking
      if (mode === 'lock') {
        // –ü–æ–ª—É—á–∞–µ–º LP –∫–æ–Ω—Ç—Ä–∞–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const lpTokenContract = new ethers.Contract(CONTRACTS.LP_TOKEN, [
          "function balanceOf(address) view returns (uint256)",
          "function allowance(address owner, address spender) view returns (uint256)",
          "function approve(address spender, uint256 amount) returns (bool)"
        ], signer);
        
        const userLPBalance = await (lpTokenContract as any).balanceOf(account);
        if (userLPBalance < lpAmountWei) {
          toast.error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ LP —Ç–æ–∫–µ–Ω–æ–≤');
          return;
        }

        // Approve LP tokens to LP Locker contract
        const lpAllowance = await (lpTokenContract as any).allowance(account, CONTRACTS.LP_LOCKER);
        if (lpAllowance < lpAmountWei) {
          toast.loading('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ LP —Ç–æ–∫–µ–Ω–æ–≤...');
          const approveTx = await (lpTokenContract as any).approve(CONTRACTS.LP_LOCKER, lpAmountWei);
          await approveTx.wait();
        }

        // Lock LP tokens using LP Locker contract
        toast.loading('–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ LP —Ç–æ–∫–µ–Ω–æ–≤...');
        const tx = await (lpLockerWithSigner as any).lockLPTokens(lpAmountWei);
        const receipt = await tx.wait();

        if (receipt.status === 1) {
          toast.success('LP —Ç–æ–∫–µ–Ω—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!');
          fetchTokenData(true);
          setLpAmount('');
        }
      }
    } catch (error: any) {
      console.error('LockLP Error:', error);
      
      if (error.message?.includes('Too frequent transactions')) {
        toast.error('MEV Protection: –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏');
      } else if (error.message?.includes('insufficient funds')) {
        toast.error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
      } else if (error.message?.includes('user rejected')) {
        toast.error('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
      } else {
        toast.error(`–û—à–∏–±–∫–∞: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      }
    } finally {
      setLoading(false);
    }
  };

  // Utility functions
  const formatBalance = (balance: string): string => {
    const num = parseFloat(balance);
    if (num === 0) return '0';
    if (num < 0.001) return '<0.001';
    if (num < 1) return num.toFixed(4);
    if (num < 1000) return num.toFixed(2);
    if (num < 1000000) return `${(num / 1000).toFixed(1)}K`;
    return `${(num / 1000000).toFixed(1)}M`;
  };

  const calculateVGReward = (): string => {
    if (mode === 'create') {
      if (!vcAmount || !bnbAmount) return '0';
      try {
        const vcValue = parseFloat(vcAmount);
        const bnbValue = parseFloat(bnbAmount);
        const lpAmount = Math.sqrt(vcValue * bnbValue);
        const vgReward = lpAmount * 15;
        return vgReward.toFixed(2);
      } catch {
        return '0';
      }
    } else {
      if (!lpAmount) return '0';
      try {
        const lpValue = parseFloat(lpAmount);
        const vgReward = lpValue * 15;
        return vgReward.toFixed(2);
      } catch {
        return '0';
      }
    }
  };

  const refreshAllData = async () => {
    console.log('EarnVGWidget: Manual refresh triggered');
    await fetchTokenData(true);
    await refreshPoolInfo();
  };

  if (!isConnected) {
    return (
      <div className={`bg-gradient-to-br from-slate-800/80 to-slate-900/80 backdrop-blur-sm border border-slate-600/50 rounded-xl p-6 shadow-xl ${className}`}>
        <div className="text-center">
          <Wallet className="h-16 w-16 text-blue-400 mb-6 mx-auto" />
          <h3 className="text-xl font-bold text-white mb-3">–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫</h3>
          <p className="text-gray-300">
            –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è LP Staking –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å MetaMask
          </p>
        </div>
      </div>
    );
  }

  return (
    <div className={`bg-gradient-to-br from-slate-800/80 to-slate-900/80 backdrop-blur-sm border border-slate-600/50 rounded-xl p-6 shadow-xl ${className}`}>
      {/* Header */}
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center gap-3">
          <div className="p-2 rounded-lg bg-gradient-to-r from-blue-500/30 to-purple-500/30">
            <Zap className="h-6 w-6 text-blue-400" />
          </div>
          <div>
            <h3 className="text-xl font-bold text-white">‚ö° –ü–æ–ª—É—á–∏—Ç—å VG —Ç–æ–∫–µ–Ω—ã</h3>
            <p className="text-gray-300 text-sm">
              {mode === 'create' 
                ? '–°–æ–∑–¥–∞–π—Ç–µ LP –ø–æ–∑–∏—Ü–∏—é –∏ –ø–æ–ª—É—á–∏—Ç–µ VG (15:1)'
                : '–ó–∞–±–ª–æ–∫–∏—Ä—É–π—Ç–µ LP —Ç–æ–∫–µ–Ω—ã –∏ –ø–æ–ª—É—á–∏—Ç–µ VG (15:1)'
              }
            </p>
          </div>
        </div>
        <button
          onClick={refreshAllData}
          disabled={poolLoading}
          className="p-2 text-blue-400 hover:text-blue-300 transition-colors"
        >
          <RefreshCw className={cn("h-5 w-5", poolLoading && "animate-spin")} />
        </button>
      </div>

      {/* Mode Switcher */}
      <div className="flex rounded-xl bg-black/40 p-1 border border-gray-600/50 mb-6">
        <button
          onClick={() => setMode('create')}
          className={cn(
            'flex-1 px-4 py-3 text-sm font-medium rounded-lg transition-all duration-200',
            mode === 'create'
              ? 'bg-gradient-to-r from-blue-500 to-purple-500 text-white shadow-lg'
              : 'text-gray-300 hover:text-white hover:bg-gray-700/50'
          )}
        >
          Create LP
        </button>
        <button
          onClick={() => setMode('lock')}
          className={cn(
            'flex-1 px-4 py-3 text-sm font-medium rounded-lg transition-all duration-200',
            mode === 'lock'
              ? 'bg-gradient-to-r from-blue-500 to-purple-500 text-white shadow-lg'
              : 'text-gray-300 hover:text-white hover:bg-gray-700/50'
          )}
        >
          Lock LP Tokens
        </button>
      </div>

      {/* Balances */}
      <div className="grid grid-cols-2 gap-4 mb-6">
        {mode === 'create' ? (
          <>
            <div className="text-center p-4 rounded-lg bg-black/30 border border-gray-600/50">
              <div className="text-sm text-gray-400 mb-1">VC Balance</div>
              <div className="text-xl font-bold text-blue-400">
                {balancesLoading ? (
                  <div className="animate-pulse bg-gray-600 h-6 w-16 rounded mx-auto"></div>
                ) : (
                  formatBalance(balances.VC || '0')
                )}
              </div>
            </div>
            <div className="text-center p-4 rounded-lg bg-black/30 border border-gray-600/50">
              <div className="text-sm text-gray-400 mb-1">BNB Balance</div>
              <div className="text-xl font-bold text-amber-400">
                {balancesLoading ? (
                  <div className="animate-pulse bg-gray-600 h-6 w-16 rounded mx-auto"></div>
                ) : (
                  formatBalance(balances.BNB || '0')
                )}
              </div>
            </div>
          </>
        ) : (
          <>
            <div className="text-center p-4 rounded-lg bg-black/30 border border-gray-600/50">
              <div className="text-sm text-gray-400 mb-1">LP Balance</div>
              <div className="text-xl font-bold text-purple-400">
                {balancesLoading ? (
                  <div className="animate-pulse bg-gray-600 h-6 w-16 rounded mx-auto"></div>
                ) : (
                  formatBalance(balances.LP || '0')
                )}
              </div>
            </div>
            <div className="text-center p-4 rounded-lg bg-black/30 border border-gray-600/50">
              <div className="text-sm text-gray-400 mb-1">VG Balance</div>
              <div className="text-xl font-bold text-green-400">
                {balancesLoading ? (
                  <div className="animate-pulse bg-gray-600 h-6 w-16 rounded mx-auto"></div>
                ) : (
                  formatBalance(balances.VG || '0')
                )}
              </div>
            </div>
          </>
        )}
      </div>

      {/* Pool Information */}
      {mode === 'create' && (
        <div className="bg-gradient-to-r from-blue-500/10 to-purple-500/10 rounded-xl p-4 border border-blue-500/30 mb-6">
          <div className="flex items-center justify-between mb-3">
            <span className="text-sm font-medium text-white flex items-center gap-2">
              <Info className="w-4 h-4 text-blue-400" />
              Pool Information
            </span>
            {!poolInfo.isLoaded && (
              <div className="flex items-center gap-1 text-xs text-amber-400">
                <AlertCircle className="w-3 h-3" />
                Fallback
              </div>
            )}
          </div>
          <div className="grid grid-cols-2 gap-4 text-sm">
            <div>
              <div className="text-gray-400 mb-1">VC Reserve</div>
              <div className="font-medium text-white">
                {poolLoading ? (
                  <div className="animate-pulse bg-gray-600 h-4 w-16 rounded"></div>
                ) : (
                  formatBalance(poolInfo.vcReserve)
                )}
              </div>
            </div>
            <div>
              <div className="text-gray-400 mb-1">BNB Reserve</div>
              <div className="font-medium text-white">
                {poolLoading ? (
                  <div className="animate-pulse bg-gray-600 h-4 w-16 rounded"></div>
                ) : (
                  formatBalance(poolInfo.bnbReserve)
                )}
              </div>
            </div>
          </div>
          <div className="mt-3 pt-3 border-t border-blue-500/30">
            <div className="text-xs text-gray-400">Current Price</div>
            <div className="text-sm font-medium text-green-400">
              {poolLoading ? (
                <div className="animate-pulse bg-gray-600 h-4 w-24 rounded"></div>
              ) : (
                `1 VC = ${poolInfo.price} BNB`
              )}
            </div>
          </div>
        </div>
      )}

      {/* Input Fields */}
      <div className="space-y-4 mb-6">
        {mode === 'create' ? (
          <>
            <div>
              <label className="block text-sm font-medium text-white mb-2">VC Amount</label>
              <div className="relative">
                <div className="absolute left-3 top-1/2 transform -translate-y-1/2">
                  <Coins className="h-4 w-4 text-blue-400" />
                </div>
                <input
                  type="number"
                  placeholder="Enter VC amount"
                  value={vcAmount}
                  onChange={(e) => setVcAmount(e.target.value)}
                  disabled={loading}
                  className="w-full pl-10 pr-4 py-3 bg-black/40 border border-gray-600/50 rounded-lg text-white placeholder-gray-400 focus:border-blue-400 focus:ring-1 focus:ring-blue-400 transition-colors"
                />
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-white mb-2">BNB Amount (Auto-calculated)</label>
              <div className="relative">
                <div className="absolute left-3 top-1/2 transform -translate-y-1/2">
                  <Coins className="h-4 w-4 text-amber-400" />
                </div>
                <input
                  type="number"
                  placeholder={poolInfo.isLoaded ? "Auto-calculated from VC" : "Using fallback ratio"}
                  value={bnbAmount}
                  onChange={(e) => setBnbAmount(e.target.value)}
                  disabled={loading}
                  className="w-full pl-10 pr-4 py-3 bg-black/40 border border-gray-600/50 rounded-lg text-white placeholder-gray-400 focus:border-amber-400 focus:ring-1 focus:ring-amber-400 transition-colors"
                />
              </div>
            </div>
          </>
        ) : (
          <div>
            <label className="block text-sm font-medium text-white mb-2">LP Token Amount</label>
            <div className="relative">
              <div className="absolute left-3 top-1/2 transform -translate-y-1/2">
                <Coins className="h-4 w-4 text-purple-400" />
              </div>
              <input
                type="number"
                placeholder="Enter LP token amount"
                value={lpAmount}
                onChange={(e) => setLpAmount(e.target.value)}
                disabled={loading}
                className="w-full pl-10 pr-4 py-3 bg-black/40 border border-gray-600/50 rounded-lg text-white placeholder-gray-400 focus:border-purple-400 focus:ring-1 focus:ring-purple-400 transition-colors"
              />
            </div>
          </div>
        )}
      </div>

      {/* VG Reward Preview */}
      {((mode === 'create' && vcAmount && bnbAmount) || (mode === 'lock' && lpAmount)) && (
        <div className="rounded-xl bg-gradient-to-r from-green-500/20 to-blue-500/20 border border-green-500/40 p-4 mb-6">
          <div className="flex items-center justify-between">
            <span className="text-sm text-white flex items-center gap-2">
              <TrendingUp className="w-4 h-4 text-green-400" />
              Expected VG Reward:
            </span>
            <span className="text-xl font-bold text-green-400">
              {calculateVGReward()} VG
            </span>
          </div>
        </div>
      )}

      {/* Action Button */}
      <button
        onClick={mode === 'create' ? handleEarnVG : handleLockLP}
        disabled={
          loading || 
          (mode === 'create' && (!vcAmount || !bnbAmount)) ||
          (mode === 'lock' && !lpAmount)
        }
        className={cn(
          "w-full h-12 text-base font-semibold rounded-lg transition-all duration-200 shadow-lg disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2",
          "bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600 text-white"
        )}
      >
        {loading ? (
          <>
            <RefreshCw className="h-5 w-5 animate-spin" />
            Processing...
          </>
        ) : (
          <>
            <Zap className="h-5 w-5" />
            {mode === 'create' ? 'Create LP + Earn VG' : 'Lock LP + Earn VG'}
          </>
        )}
      </button>

      {/* Information */}
      <div className="mt-6 space-y-2 bg-black/20 rounded-lg p-4 border border-gray-600/30">
        <div className="font-medium text-white mb-3">Important Information:</div>
        <div className="text-sm text-gray-300 space-y-1">
          <div>‚Ä¢ LP —Ç–æ–∫–µ–Ω—ã –±–ª–æ–∫–∏—Ä—É—é—Ç—Å—è –Ω–∞–≤—Å–µ–≥–¥–∞ (permanent lock)</div>
          <div>‚Ä¢ –ü–æ–ª—É—á–∞–µ—Ç–µ 15 VG –∑–∞ –∫–∞–∂–¥—ã–π 1 LP —Ç–æ–∫–µ–Ω (–º–≥–Ω–æ–≤–µ–Ω–Ω–æ)</div>
          <div>‚Ä¢ VG —Ç–æ–∫–µ–Ω—ã –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è governance</div>
          <div>‚Ä¢ –≠—Ç–æ –ù–ï —Å—Ç–µ–π–∫–∏–Ω–≥ - LP –Ω–µ–ª—å–∑—è –∑–∞–±—Ä–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ</div>
          {mode === 'lock' && (
            <div>‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –≥–æ—Ç–æ–≤—ã–µ LP —Ç–æ–∫–µ–Ω—ã VC/BNB</div>
          )}
        </div>
      </div>
    </div>
  );
};

export default EarnVGWidget; 