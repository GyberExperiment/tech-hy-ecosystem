/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace LPLocker {
  export type InitConfigStruct = {
    vgTokenAddress: AddressLike;
    vcTokenAddress: AddressLike;
    pancakeRouter: AddressLike;
    lpTokenAddress: AddressLike;
    stakingVaultAddress: AddressLike;
    lpDivisor: BigNumberish;
    lpToVgRatio: BigNumberish;
    minBnbAmount: BigNumberish;
    minVcAmount: BigNumberish;
    maxSlippageBps: BigNumberish;
    defaultSlippageBps: BigNumberish;
    mevProtectionEnabled: boolean;
    minTimeBetweenTxs: BigNumberish;
    maxTxPerUserPerBlock: BigNumberish;
  };

  export type InitConfigStructOutput = [
    vgTokenAddress: string,
    vcTokenAddress: string,
    pancakeRouter: string,
    lpTokenAddress: string,
    stakingVaultAddress: string,
    lpDivisor: bigint,
    lpToVgRatio: bigint,
    minBnbAmount: bigint,
    minVcAmount: bigint,
    maxSlippageBps: bigint,
    defaultSlippageBps: bigint,
    mevProtectionEnabled: boolean,
    minTimeBetweenTxs: bigint,
    maxTxPerUserPerBlock: bigint
  ] & {
    vgTokenAddress: string;
    vcTokenAddress: string;
    pancakeRouter: string;
    lpTokenAddress: string;
    stakingVaultAddress: string;
    lpDivisor: bigint;
    lpToVgRatio: bigint;
    minBnbAmount: bigint;
    minVcAmount: bigint;
    maxSlippageBps: bigint;
    defaultSlippageBps: bigint;
    mevProtectionEnabled: boolean;
    minTimeBetweenTxs: bigint;
    maxTxPerUserPerBlock: bigint;
  };
}

export interface LPLockerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "UPGRADE_INTERFACE_VERSION"
      | "config"
      | "depositVGTokens"
      | "earnVG"
      | "getPoolInfo"
      | "initialize"
      | "lastUserTxBlock"
      | "lastUserTxTimestamp"
      | "owner"
      | "proxiableUUID"
      | "renounceOwnership"
      | "transferAuthority"
      | "transferOwnership"
      | "updateMevProtection"
      | "updatePancakeConfig"
      | "updateRates"
      | "upgradeToAndCall"
      | "userTxCountInBlock"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AuthorityTransferred"
      | "ConfigurationUpdated"
      | "Initialized"
      | "MEVProtectionTriggered"
      | "OwnershipTransferred"
      | "Upgraded"
      | "VGTokensDeposited"
      | "VGTokensEarned"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "config", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositVGTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "earnVG",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [LPLocker.InitConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "lastUserTxBlock",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastUserTxTimestamp",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferAuthority",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMevProtection",
    values: [boolean, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePancakeConfig",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRates",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userTxCountInBlock",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "config", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositVGTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "earnVG", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPoolInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastUserTxBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastUserTxTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMevProtection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePancakeConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userTxCountInBlock",
    data: BytesLike
  ): Result;
}

export namespace AuthorityTransferredEvent {
  export type InputTuple = [
    oldAuthority: AddressLike,
    newAuthority: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    oldAuthority: string,
    newAuthority: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    oldAuthority: string;
    newAuthority: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConfigurationUpdatedEvent {
  export type InputTuple = [
    authority: AddressLike,
    field: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    authority: string,
    field: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    authority: string;
    field: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MEVProtectionTriggeredEvent {
  export type InputTuple = [
    user: AddressLike,
    blockNumber: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    blockNumber: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    user: string;
    blockNumber: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VGTokensDepositedEvent {
  export type InputTuple = [
    depositor: AddressLike,
    amount: BigNumberish,
    totalDeposited: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    depositor: string,
    amount: bigint,
    totalDeposited: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    depositor: string;
    amount: bigint;
    totalDeposited: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VGTokensEarnedEvent {
  export type InputTuple = [
    user: AddressLike,
    lpAmount: BigNumberish,
    vgAmount: BigNumberish,
    bnbAmount: BigNumberish,
    vcAmount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    lpAmount: bigint,
    vgAmount: bigint,
    bnbAmount: bigint,
    vcAmount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    user: string;
    lpAmount: bigint;
    vgAmount: bigint;
    bnbAmount: bigint;
    vcAmount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LPLocker extends BaseContract {
  connect(runner?: ContractRunner | null): LPLocker;
  waitForDeployment(): Promise<this>;

  interface: LPLockerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  config: TypedContractMethod<
    [],
    [
      [
        string,
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        authority: string;
        vgTokenAddress: string;
        vcTokenAddress: string;
        pancakeRouter: string;
        lpTokenAddress: string;
        stakingVaultAddress: string;
        lpDivisor: bigint;
        lpToVgRatio: bigint;
        minBnbAmount: bigint;
        minVcAmount: bigint;
        maxSlippageBps: bigint;
        defaultSlippageBps: bigint;
        mevProtectionEnabled: boolean;
        minTimeBetweenTxs: bigint;
        maxTxPerUserPerBlock: bigint;
        totalLockedLp: bigint;
        totalVgIssued: bigint;
        totalVgDeposited: bigint;
      }
    ],
    "view"
  >;

  depositVGTokens: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  earnVG: TypedContractMethod<
    [
      vcAmount: BigNumberish,
      bnbAmount: BigNumberish,
      slippageBps: BigNumberish
    ],
    [void],
    "payable"
  >;

  getPoolInfo: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        totalLocked: bigint;
        totalIssued: bigint;
        totalDeposited: bigint;
        availableVG: bigint;
      }
    ],
    "view"
  >;

  initialize: TypedContractMethod<
    [initConfig: LPLocker.InitConfigStruct],
    [void],
    "nonpayable"
  >;

  lastUserTxBlock: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  lastUserTxTimestamp: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferAuthority: TypedContractMethod<
    [newAuthority: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateMevProtection: TypedContractMethod<
    [
      enabled: boolean,
      minTimeBetweenTxs: BigNumberish,
      maxTxPerBlock: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  updatePancakeConfig: TypedContractMethod<
    [newRouter: AddressLike, newLpToken: AddressLike],
    [void],
    "nonpayable"
  >;

  updateRates: TypedContractMethod<
    [newLpToVgRatio: BigNumberish, newLpDivisor: BigNumberish],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  userTxCountInBlock: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "config"
  ): TypedContractMethod<
    [],
    [
      [
        string,
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        authority: string;
        vgTokenAddress: string;
        vcTokenAddress: string;
        pancakeRouter: string;
        lpTokenAddress: string;
        stakingVaultAddress: string;
        lpDivisor: bigint;
        lpToVgRatio: bigint;
        minBnbAmount: bigint;
        minVcAmount: bigint;
        maxSlippageBps: bigint;
        defaultSlippageBps: bigint;
        mevProtectionEnabled: boolean;
        minTimeBetweenTxs: bigint;
        maxTxPerUserPerBlock: bigint;
        totalLockedLp: bigint;
        totalVgIssued: bigint;
        totalVgDeposited: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "depositVGTokens"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "earnVG"
  ): TypedContractMethod<
    [
      vcAmount: BigNumberish,
      bnbAmount: BigNumberish,
      slippageBps: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getPoolInfo"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        totalLocked: bigint;
        totalIssued: bigint;
        totalDeposited: bigint;
        availableVG: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [initConfig: LPLocker.InitConfigStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lastUserTxBlock"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastUserTxTimestamp"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferAuthority"
  ): TypedContractMethod<[newAuthority: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMevProtection"
  ): TypedContractMethod<
    [
      enabled: boolean,
      minTimeBetweenTxs: BigNumberish,
      maxTxPerBlock: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePancakeConfig"
  ): TypedContractMethod<
    [newRouter: AddressLike, newLpToken: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateRates"
  ): TypedContractMethod<
    [newLpToVgRatio: BigNumberish, newLpDivisor: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "userTxCountInBlock"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getEvent(
    key: "AuthorityTransferred"
  ): TypedContractEvent<
    AuthorityTransferredEvent.InputTuple,
    AuthorityTransferredEvent.OutputTuple,
    AuthorityTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ConfigurationUpdated"
  ): TypedContractEvent<
    ConfigurationUpdatedEvent.InputTuple,
    ConfigurationUpdatedEvent.OutputTuple,
    ConfigurationUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "MEVProtectionTriggered"
  ): TypedContractEvent<
    MEVProtectionTriggeredEvent.InputTuple,
    MEVProtectionTriggeredEvent.OutputTuple,
    MEVProtectionTriggeredEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;
  getEvent(
    key: "VGTokensDeposited"
  ): TypedContractEvent<
    VGTokensDepositedEvent.InputTuple,
    VGTokensDepositedEvent.OutputTuple,
    VGTokensDepositedEvent.OutputObject
  >;
  getEvent(
    key: "VGTokensEarned"
  ): TypedContractEvent<
    VGTokensEarnedEvent.InputTuple,
    VGTokensEarnedEvent.OutputTuple,
    VGTokensEarnedEvent.OutputObject
  >;

  filters: {
    "AuthorityTransferred(address,address,uint256)": TypedContractEvent<
      AuthorityTransferredEvent.InputTuple,
      AuthorityTransferredEvent.OutputTuple,
      AuthorityTransferredEvent.OutputObject
    >;
    AuthorityTransferred: TypedContractEvent<
      AuthorityTransferredEvent.InputTuple,
      AuthorityTransferredEvent.OutputTuple,
      AuthorityTransferredEvent.OutputObject
    >;

    "ConfigurationUpdated(address,string,uint256)": TypedContractEvent<
      ConfigurationUpdatedEvent.InputTuple,
      ConfigurationUpdatedEvent.OutputTuple,
      ConfigurationUpdatedEvent.OutputObject
    >;
    ConfigurationUpdated: TypedContractEvent<
      ConfigurationUpdatedEvent.InputTuple,
      ConfigurationUpdatedEvent.OutputTuple,
      ConfigurationUpdatedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "MEVProtectionTriggered(address,uint256,uint256)": TypedContractEvent<
      MEVProtectionTriggeredEvent.InputTuple,
      MEVProtectionTriggeredEvent.OutputTuple,
      MEVProtectionTriggeredEvent.OutputObject
    >;
    MEVProtectionTriggered: TypedContractEvent<
      MEVProtectionTriggeredEvent.InputTuple,
      MEVProtectionTriggeredEvent.OutputTuple,
      MEVProtectionTriggeredEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;

    "VGTokensDeposited(address,uint256,uint256,uint256)": TypedContractEvent<
      VGTokensDepositedEvent.InputTuple,
      VGTokensDepositedEvent.OutputTuple,
      VGTokensDepositedEvent.OutputObject
    >;
    VGTokensDeposited: TypedContractEvent<
      VGTokensDepositedEvent.InputTuple,
      VGTokensDepositedEvent.OutputTuple,
      VGTokensDepositedEvent.OutputObject
    >;

    "VGTokensEarned(address,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      VGTokensEarnedEvent.InputTuple,
      VGTokensEarnedEvent.OutputTuple,
      VGTokensEarnedEvent.OutputObject
    >;
    VGTokensEarned: TypedContractEvent<
      VGTokensEarnedEvent.InputTuple,
      VGTokensEarnedEvent.OutputTuple,
      VGTokensEarnedEvent.OutputObject
    >;
  };
}
