import { execSync } from "child_process";
import * as fs from "fs";

interface TestResult {
    name: string;
    passed: number;
    failed: number;
    duration: number;
    errors: string[];
}

interface TestSuite {
    category: string;
    tests: string[];
    description: string;
}

const TEST_SUITES: TestSuite[] = [
    {
        category: "ü™ô Production Tokens",
        tests: [
            "test/tokens/VGToken.test.ts",
            "test/tokens/VGTokenVotes.test.ts",
            "test/tokens/VCToken.test.ts"
        ],
        description: "Complete testing of production token contracts"
    },
    {
        category: "üîí Core LPLocker",
        tests: [
            "test/LPLocker.test.ts"
        ],
        description: "Core LPLocker functionality with security features"
    },
    {
        category: "üîÑ Full Integration",
        tests: [
            "test/integration/FullEcosystem.test.ts"
        ],
        description: "End-to-end ecosystem integration testing"
    }
];

class TestRunner {
    private results: TestResult[] = [];
    private startTime: number = 0;

    async runAllTests(): Promise<void> {
        console.log("üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –ë–û–ï–í–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï");
        console.log("=" .repeat(60));
        
        this.startTime = Date.now();

        for (const suite of TEST_SUITES) {
            await this.runTestSuite(suite);
        }

        this.generateReport();
    }

    private async runTestSuite(suite: TestSuite): Promise<void> {
        console.log(`\n${suite.category}`);
        console.log("-".repeat(40));
        console.log(`üìã ${suite.description}`);
        console.log("");

        for (const testFile of suite.tests) {
            await this.runSingleTest(testFile, suite.category);
        }
    }

    private async runSingleTest(testFile: string, category: string): Promise<void> {
        const testName = testFile.split("/").pop()?.replace(".test.ts", "") || testFile;
        
        console.log(`üß™ –ó–∞–ø—É—Å–∫ ${testName}...`);
        
        const startTime = Date.now();
        
        try {
            // –ö–æ–º–ø–∏–ª—è—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (!fs.existsSync("artifacts")) {
                console.log("  üì¶ –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã...");
                execSync("npx hardhat compile", { stdio: "pipe" });
            }

            // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –±–µ–∑ --reporter json
            const output = execSync(`npx hardhat test ${testFile}`, { 
                stdio: "pipe",
                encoding: "utf8"
            });

            const result = this.parseTestOutput(output, testName, Date.now() - startTime);
            this.results.push(result);
            
            if (result.failed === 0) {
                console.log(`  ‚úÖ ${testName}: ${result.passed} tests passed (${result.duration}ms)`);
            } else {
                console.log(`  ‚ùå ${testName}: ${result.failed} tests failed, ${result.passed} passed`);
                result.errors.forEach(error => console.log(`     üíÄ ${error}`));
            }

        } catch (error: any) {
            console.log(`  üí• ${testName}: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê`);
            console.log(`     ${error.message}`);
            
            this.results.push({
                name: testName,
                passed: 0,
                failed: 1,
                duration: Date.now() - startTime,
                errors: [error.message]
            });
        }
    }

    private parseTestOutput(output: string, testName: string, duration: number): TestResult {
        try {
            // Parse standard hardhat output format
            const passedMatch = output.match(/(\d+) passing/);
            const failedMatch = output.match(/(\d+) failing/);
            
            const passed = passedMatch ? parseInt(passedMatch[1]) : 0;
            const failed = failedMatch ? parseInt(failedMatch[1]) : 0;
            
            // Extract error messages if any
            const errors: string[] = [];
            if (failed > 0) {
                const errorMatches = output.match(/Error: .+/g);
                if (errorMatches) {
                    errors.push(...errorMatches.slice(0, 3)); // Limit to first 3 errors
                }
            }
            
            return {
                name: testName,
                passed: passed,
                failed: failed,
                duration: duration,
                errors: errors
            };
        } catch {
            // Fallback parsing
            const hasError = output.includes("Error") || output.includes("failing");
            return {
                name: testName,
                passed: hasError ? 0 : 1,
                failed: hasError ? 1 : 0,
                duration: duration,
                errors: hasError ? ["Parse error - see detailed output"] : []
            };
        }
    }

    private generateReport(): void {
        const totalDuration = Date.now() - this.startTime;
        const totalPassed = this.results.reduce((sum, r) => sum + r.passed, 0);
        const totalFailed = this.results.reduce((sum, r) => sum + r.failed, 0);
        const totalTests = totalPassed + totalFailed;

        console.log("\n" + "=".repeat(60));
        console.log("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ë–û–ï–í–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø");
        console.log("=".repeat(60));

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        for (const suite of TEST_SUITES) {
            const suiteResults = this.results.filter(r => 
                suite.tests.some(test => test.includes(r.name))
            );
            
            const suitePassed = suiteResults.reduce((sum, r) => sum + r.passed, 0);
            const suiteFailed = suiteResults.reduce((sum, r) => sum + r.failed, 0);
            
            const status = suiteFailed === 0 ? "‚úÖ" : "‚ùå";
            console.log(`${status} ${suite.category}: ${suitePassed} passed, ${suiteFailed} failed`);
        }

        console.log("\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:");
        console.log(`‚Ä¢ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${totalTests}`);
        console.log(`‚Ä¢ –ü—Ä–æ—à–ª–æ: ${totalPassed} ‚úÖ`);
        console.log(`‚Ä¢ –£–ø–∞–ª–æ: ${totalFailed} ‚ùå`);
        console.log(`‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${totalTests > 0 ? ((totalPassed / totalTests) * 100).toFixed(1) : 0}%`);
        console.log(`‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è: ${(totalDuration / 1000).toFixed(2)}s`);

        // –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏
        const failedResults = this.results.filter(r => r.failed > 0);
        if (failedResults.length > 0) {
            console.log("\nüíÄ –î–ï–¢–ê–õ–ò –û–®–ò–ë–û–ö:");
            failedResults.forEach(result => {
                console.log(`\n‚ùå ${result.name}:`);
                result.errors.forEach(error => console.log(`   ‚Ä¢ ${error}`));
            });
        }

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        console.log("\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:");
        
        if (totalFailed === 0) {
            console.log("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –¥–µ–ø–ª–æ—é –≤ testnet");
            console.log("üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:");
            console.log("   1. –ó–∞–ø—É—Å—Ç–∏—Ç—å deploy-tokens.ts");
            console.log("   2. –ó–∞–ø—É—Å—Ç–∏—Ç—å deploy-ecosystem.ts");
            console.log("   3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ BSC testnet");
        } else {
            console.log("‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã - –î–ï–ü–õ–û–ô –ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø");
            console.log("üîß –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º");
        }

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        this.saveReport({
            timestamp: new Date().toISOString(),
            totalTests,
            totalPassed,
            totalFailed,
            successRate: totalTests > 0 ? (totalPassed / totalTests) * 100 : 0,
            duration: totalDuration,
            results: this.results,
            readyForDeploy: totalFailed === 0
        });

        console.log("\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ test-report.json");
    }

    private saveReport(report: any): void {
        fs.writeFileSync("test-report.json", JSON.stringify(report, null, 2));
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (require.main === module) {
    const runner = new TestRunner();
    runner.runAllTests()
        .then(() => process.exit(0))
        .catch((error) => {
            console.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç-—Ä–∞–Ω–Ω–µ—Ä–∞:", error);
            process.exit(1);
        });
}

export { TestRunner }; 