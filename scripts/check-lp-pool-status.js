const { ethers } = require('hardhat');
const deployedContracts = require('../deployed-ecosystem.json');

async function main() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è LP –ø—É–ª–∞ VC/WBNB...\n');

  const [deployer] = await ethers.getSigners();
  console.log('Deployer address:', deployer.address);

  // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
  const CONTRACTS = {
    VG_TOKEN: deployedContracts.VG_TOKEN,
    LP_LOCKER: deployedContracts.LP_LOCKER_PROXY,
    VC_TOKEN: deployedContracts.VC_TOKEN,
  };

  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
  const LPLocker = await ethers.getContractAt('LPLocker', CONTRACTS.LP_LOCKER);
  const VCToken = await ethers.getContractAt('VCToken', CONTRACTS.VC_TOKEN);

  console.log('üìã –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã:');
  console.log('LP Locker:', CONTRACTS.LP_LOCKER);
  console.log('VC Token:', CONTRACTS.VC_TOKEN);
  console.log();

  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    const config = await LPLocker.config();
    console.log('‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è LPLocker:');
    console.log('pancakeRouter:', config.pancakeRouter);
    console.log('lpTokenAddress:', config.lpTokenAddress);
    console.log('vcTokenAddress:', config.vcTokenAddress);
    console.log();

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º PancakeSwap Router
    console.log('ü•û PancakeSwap Router:');
    const router = await ethers.getContractAt('IPancakeRouter02', config.pancakeRouter);
    
    try {
      const factory = await router.factory();
      console.log('Factory address:', factory);
      
      const WETH = await router.WETH();
      console.log('WETH address:', WETH);
      console.log();
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö router:', error.message);
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º LP —Ç–æ–∫–µ–Ω
    console.log('ü™ô LP Token:');
    const lpToken = await ethers.getContractAt('IERC20', config.lpTokenAddress);
    
    try {
      const lpTotalSupply = await lpToken.totalSupply();
      const lpLockerBalance = await lpToken.balanceOf(CONTRACTS.LP_LOCKER);
      
      console.log('LP Total Supply:', ethers.formatEther(lpTotalSupply), 'LP');
      console.log('LPLocker LP balance:', ethers.formatEther(lpLockerBalance), 'LP');
      console.log();
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö LP token:', error.message);
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É–ª VC/WBNB
    console.log('üèä –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É–ª–∞ VC/WBNB:');
    try {
      const factory = await ethers.getContractAt('IPancakeFactory', await router.factory());
      const WETH = await router.WETH();
      
      const pairAddress = await factory.getPair(config.vcTokenAddress, WETH);
      console.log('Pair address:', pairAddress);
      
      if (pairAddress === ethers.ZeroAddress) {
        console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ü—É–ª VC/WBNB –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
        console.log('–ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø—É–ª –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π router');
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –≤ –ø—É–ª–µ
      const pair = await ethers.getContractAt('IERC20', pairAddress);
      const pairTotalSupply = await pair.totalSupply();
      
      console.log('‚úÖ –ü—É–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      console.log('Pair total supply:', ethers.formatEther(pairTotalSupply), 'LP');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑–µ—Ä–≤—ã
      const vcBalanceInPair = await VCToken.balanceOf(pairAddress);
      const wethBalanceInPair = await ethers.provider.getBalance(pairAddress);
      
      console.log('VC –≤ –ø—É–ª–µ:', ethers.formatEther(vcBalanceInPair), 'VC');
      console.log('WBNB –≤ –ø—É–ª–µ:', ethers.formatEther(wethBalanceInPair), 'WBNB');
      
      if (vcBalanceInPair === 0n || wethBalanceInPair === 0n) {
        console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ü—É–ª –ø—É—Å—Ç–æ–π! –ù–µ—Ç –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏');
      } else {
        console.log('‚úÖ –í –ø—É–ª–µ –µ—Å—Ç—å –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å');
      }
      
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—É–ª–∞:', error.message);
    }
    console.log();

    // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º addLiquidityETH —Å–∏–º—É–ª—è—Ü–∏—é
    console.log('üß™ –¢–µ—Å—Ç —Å–∏–º—É–ª—è—Ü–∏–∏ addLiquidityETH:');
    const vcAmount = ethers.parseEther('1');
    const bnbAmount = ethers.parseEther('0.01');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º allowance
      const allowance = await VCToken.allowance(deployer.address, config.pancakeRouter);
      console.log('VC allowance to router:', ethers.formatEther(allowance), 'VC');
      
      if (allowance < vcAmount) {
        console.log('üìù –ù—É–∂–Ω–æ approve VC –¥–ª—è router');
      }
      
      // –ü—Ä–æ–±—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
      const minVcAmount = (vcAmount * 9000n) / 10000n; // 10% slippage
      const minBnbAmount = (bnbAmount * 9000n) / 10000n;
      
      console.log('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–º—É–ª—è—Ü–∏–∏:');
      console.log('  VC Amount:', ethers.formatEther(vcAmount), 'VC');
      console.log('  BNB Amount:', ethers.formatEther(bnbAmount), 'BNB');
      console.log('  Min VC:', ethers.formatEther(minVcAmount), 'VC');
      console.log('  Min BNB:', ethers.formatEther(minBnbAmount), 'BNB');
      
      // –°–∏–º—É–ª—è—Ü–∏—è addLiquidityETH
      const result = await router.addLiquidityETH.staticCall(
        config.vcTokenAddress,
        vcAmount,
        minVcAmount,
        minBnbAmount,
        deployer.address,
        Math.floor(Date.now() / 1000) + 300,
        { value: bnbAmount }
      );
      
      console.log('‚úÖ –°–∏–º—É–ª—è—Ü–∏—è addLiquidityETH —É—Å–ø–µ—à–Ω–∞!');
      console.log('Expected liquidity:', ethers.formatEther(result[2]), 'LP');
      
    } catch (simError) {
      console.log('‚ùå –°–∏–º—É–ª—è—Ü–∏—è addLiquidityETH failed:', simError.message);
      
      if (simError.message.includes('INSUFFICIENT_A_AMOUNT')) {
        console.log('üîç –ü—Ä–æ–±–ª–µ–º–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ VC —Ç–æ–∫–µ–Ω–æ–≤');
      } else if (simError.message.includes('INSUFFICIENT_B_AMOUNT')) {
        console.log('üîç –ü—Ä–æ–±–ª–µ–º–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ BNB');
      } else if (simError.message.includes('INSUFFICIENT_LIQUIDITY')) {
        console.log('üîç –ü—Ä–æ–±–ª–µ–º–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –≤ –ø—É–ª–µ');
      } else if (simError.message.includes('EXPIRED')) {
        console.log('üîç –ü—Ä–æ–±–ª–µ–º–∞: Deadline –∏—Å—Ç–µ–∫');
      }
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error.message);
  }
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è PancakeFactory
const IPancakeFactory = [
  "function getPair(address tokenA, address tokenB) external view returns (address pair)"
];

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  }); 