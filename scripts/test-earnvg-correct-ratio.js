const { ethers } = require('hardhat');
const deployedContracts = require('../deployed-ecosystem.json');

async function main() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ earnVG —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º VC/BNB...\n');

  const [deployer] = await ethers.getSigners();
  console.log('Deployer address:', deployer.address);

  // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
  const CONTRACTS = {
    VG_TOKEN: deployedContracts.VG_TOKEN,
    LP_LOCKER: deployedContracts.LP_LOCKER_PROXY,
    VC_TOKEN: deployedContracts.VC_TOKEN,
  };

  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
  const VGToken = await ethers.getContractAt('VGToken', CONTRACTS.VG_TOKEN);
  const LPLocker = await ethers.getContractAt('LPLocker', CONTRACTS.LP_LOCKER);
  const VCToken = await ethers.getContractAt('VCToken', CONTRACTS.VC_TOKEN);

  console.log('üìã –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã:');
  console.log('VG Token:', CONTRACTS.VG_TOKEN);
  console.log('LP Locker:', CONTRACTS.LP_LOCKER);
  console.log('VC Token:', CONTRACTS.VC_TOKEN);
  console.log();

  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
    const config = await LPLocker.config();
    console.log('‚öôÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:');
    console.log('minVcAmount:', ethers.formatEther(config.minVcAmount), 'VC');
    console.log('minBnbAmount:', ethers.formatEther(config.minBnbAmount), 'BNB');
    console.log();

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å—ã –î–û —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    console.log('üí∞ –ë–∞–ª–∞–Ω—Å—ã –î–û earnVG:');
    const vgBalanceBefore = await VGToken.balanceOf(deployer.address);
    const vcBalanceBefore = await VCToken.balanceOf(deployer.address);
    const bnbBalanceBefore = await deployer.provider.getBalance(deployer.address);
    const vaultBalanceBefore = await VGToken.balanceOf(config.stakingVaultAddress);
    
    console.log('VG balance:', ethers.formatEther(vgBalanceBefore), 'VG');
    console.log('VC balance:', ethers.formatEther(vcBalanceBefore), 'VC');
    console.log('BNB balance:', ethers.formatEther(bnbBalanceBefore), 'BNB');
    console.log('Vault VG balance:', ethers.formatEther(vaultBalanceBefore), 'VG');
    console.log();

    // 3. –ü–†–ê–í–ò–õ–¨–ù–´–ï –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è earnVG (—Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ 1 BNB = 10,000 VC)
    const vcAmount = ethers.parseEther('100'); // 100 VC
    const bnbAmount = ethers.parseEther('0.01'); // 0.01 BNB
    const slippageBps = 1000; // 10%

    console.log('üéØ –ü–†–ê–í–ò–õ–¨–ù–´–ï –ø–∞—Ä–∞–º–µ—Ç—Ä—ã earnVG:');
    console.log('VC Amount:', ethers.formatEther(vcAmount), 'VC');
    console.log('BNB Amount:', ethers.formatEther(bnbAmount), 'BNB');
    console.log('–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ:', Number(ethers.formatEther(vcAmount)) / Number(ethers.formatEther(bnbAmount)), 'VC/BNB');
    console.log('Slippage:', slippageBps / 100, '%');
    console.log();

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º allowance VC
    console.log('üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ allowance:');
    const vcAllowance = await VCToken.allowance(deployer.address, CONTRACTS.LP_LOCKER);
    console.log('Current VC allowance:', ethers.formatEther(vcAllowance), 'VC');
    
    if (vcAllowance < vcAmount) {
      console.log('üìù Approving VC tokens...');
      const approveTx = await VCToken.approve(CONTRACTS.LP_LOCKER, vcAmount);
      await approveTx.wait();
      console.log('‚úÖ VC tokens approved');
    } else {
      console.log('‚úÖ VC allowance sufficient');
    }
    console.log();

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –Ω–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤
    if (bnbBalanceBefore < bnbAmount) {
      console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ BNB!');
      console.log('–¢—Ä–µ–±—É–µ—Ç—Å—è:', ethers.formatEther(bnbAmount), 'BNB');
      console.log('–î–æ—Å—Ç—É–ø–Ω–æ:', ethers.formatEther(bnbBalanceBefore), 'BNB');
      return;
    }

    if (vcBalanceBefore < vcAmount) {
      console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ VC!');
      console.log('–¢—Ä–µ–±—É–µ—Ç—Å—è:', ethers.formatEther(vcAmount), 'VC');
      console.log('–î–æ—Å—Ç—É–ø–Ω–æ:', ethers.formatEther(vcBalanceBefore), 'VC');
      return;
    }

    // 6. –í—ã–ø–æ–ª–Ω—è–µ–º earnVG —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    console.log('üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ earnVG —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º...');
    const tx = await LPLocker.earnVG(vcAmount, bnbAmount, slippageBps, {
      value: bnbAmount,
      gasLimit: 500000,
    });
    
    console.log('Transaction hash:', tx.hash);
    console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...');
    
    const receipt = await tx.wait();
    console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!');
    console.log('Gas used:', receipt.gasUsed.toString());
    console.log();

    // 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å—ã –ü–û–°–õ–ï —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    console.log('üí∞ –ë–∞–ª–∞–Ω—Å—ã –ü–û–°–õ–ï earnVG:');
    const vgBalanceAfter = await VGToken.balanceOf(deployer.address);
    const vcBalanceAfter = await VCToken.balanceOf(deployer.address);
    const bnbBalanceAfter = await deployer.provider.getBalance(deployer.address);
    const vaultBalanceAfter = await VGToken.balanceOf(config.stakingVaultAddress);
    
    console.log('VG balance:', ethers.formatEther(vgBalanceAfter), 'VG');
    console.log('VC balance:', ethers.formatEther(vcBalanceAfter), 'VC');
    console.log('BNB balance:', ethers.formatEther(bnbBalanceAfter), 'BNB');
    console.log('Vault VG balance:', ethers.formatEther(vaultBalanceAfter), 'VG');
    console.log();

    // 8. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    console.log('üìä –ò–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤:');
    const vgDiff = vgBalanceAfter - vgBalanceBefore;
    const vcDiff = vcBalanceBefore - vcBalanceAfter;
    const bnbDiff = bnbBalanceBefore - bnbBalanceAfter;
    const vaultDiff = vaultBalanceBefore - vaultBalanceAfter;
    
    console.log('VG –ø–æ–ª—É—á–µ–Ω–æ:', ethers.formatEther(vgDiff), 'VG');
    console.log('VC –ø–æ—Ç—Ä–∞—á–µ–Ω–æ:', ethers.formatEther(vcDiff), 'VC');
    console.log('BNB –ø–æ—Ç—Ä–∞—á–µ–Ω–æ:', ethers.formatEther(bnbDiff), 'BNB (–≤–∫–ª—é—á–∞—è gas)');
    console.log('VG –∏–∑ vault:', ethers.formatEther(vaultDiff), 'VG');
    console.log();

    // 9. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è
    console.log('üìú –°–æ–±—ã—Ç–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:');
    const events = receipt.logs;
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${events.length} —Å–æ–±—ã—Ç–∏–π –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏`);
    
    // –ò—â–µ–º VGTokensEarned —Å–æ–±—ã—Ç–∏–µ
    for (const log of events) {
      try {
        const parsed = LPLocker.interface.parseLog(log);
        if (parsed && parsed.name === 'VGTokensEarned') {
          console.log('üéØ VGTokensEarned —Å–æ–±—ã—Ç–∏–µ:');
          console.log('  User:', parsed.args.user);
          console.log('  LP Amount:', ethers.formatEther(parsed.args.lpAmount), 'LP');
          console.log('  VG Reward:', ethers.formatEther(parsed.args.vgReward), 'VG');
          console.log('  VC Amount:', ethers.formatEther(parsed.args.vcAmount), 'VC');
          console.log('  BNB Amount:', ethers.formatEther(parsed.args.bnbAmount), 'BNB');
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ LP –∫ VG
          const lpToVgRatio = Number(ethers.formatEther(parsed.args.vgReward)) / Number(ethers.formatEther(parsed.args.lpAmount));
          console.log('  LP to VG ratio:', lpToVgRatio.toFixed(2), 'VG per LP');
        }
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –¥—Ä—É–≥–∏—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
      }
    }

    if (vgDiff > 0) {
      console.log('\nüéâ SUCCESS: VG —Ç–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã!');
      console.log('üè¶ –ù–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ Contract Vault —Ä–∞–±–æ—Ç–∞–µ—Ç!');
      console.log('‚úÖ earnVG —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ vault —É–º–µ–Ω—å—à–∏–ª—Å—è
      if (vaultDiff > 0) {
        console.log('‚úÖ VG —Ç–æ–∫–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –∏–∑ vault');
      }
    } else {
      console.log('\n‚ùå PROBLEM: VG —Ç–æ–∫–µ–Ω—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    
    if (error.message.includes('INSUFFICIENT_B_AMOUNT')) {
      console.log('üîç –ü—Ä–æ–±–ª–µ–º–∞: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ VC/BNB');
    } else if (error.message.includes('INSUFFICIENT_A_AMOUNT')) {
      console.log('üîç –ü—Ä–æ–±–ª–µ–º–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ VC —Ç–æ–∫–µ–Ω–æ–≤');
    } else if (error.message.includes('INSUFFICIENT_LIQUIDITY')) {
      console.log('üîç –ü—Ä–æ–±–ª–µ–º–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –≤ –ø—É–ª–µ');
    }
  }
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  }); 