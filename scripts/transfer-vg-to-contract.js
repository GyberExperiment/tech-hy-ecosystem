const { ethers } = require('hardhat');
const { log } = require('./logger');

async function main() {
  log.info('üîÑ –ü–µ—Ä–µ–≤–æ–¥ VG —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç LPLocker...');
  log.separator();

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏
  const [deployer] = await ethers.getSigners();
  
  log.info('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏:');
  log.info(`Deployer: ${deployer.address}`);
  log.info(`Network: ${(await ethers.provider.getNetwork()).name}`);
  log.info(`Chain ID: ${(await ethers.provider.getNetwork()).chainId}`);
  log.separator();

  // –ê–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
  const contracts = {
    VG_TOKEN: "0xe87c0Ff36084033FfB56aCf68F2dD5857C65342d", 
    LP_LOCKER: "0x9269baba99cE0388Daf814E351b4d556fA728D32",
  };

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º
  const vgToken = await ethers.getContractAt("VGToken", contracts.VG_TOKEN);
  const lpLocker = await ethers.getContractAt("LPLocker", contracts.LP_LOCKER);

  log.info('üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–∏—Ö –±–∞–ª–∞–Ω—Å–æ–≤:');
  try {
    const deployerVGBalance = await vgToken.balanceOf(deployer.address);
    const contractVGBalance = await vgToken.balanceOf(contracts.LP_LOCKER);
    
    log.info(`Deployer VG Balance: ${ethers.formatEther(deployerVGBalance)} VG`);
    log.info(`LPLocker VG Balance: ${ethers.formatEther(contractVGBalance)} VG`);
    
    if (deployerVGBalance === 0n) {
      log.error('‚ùå –£ deployer –Ω–µ—Ç VG —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞');
      return;
    }
  } catch (error) {
    log.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤:', error.message);
    return;
  }
  log.separator();

  log.info('‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ LPLocker:');
  try {
    const config = await lpLocker.config();
    const stakingVault = config[5];
    
    log.info(`–¢–µ–∫—É—â–∏–π Staking Vault: ${stakingVault}`);
    log.info(`LPLocker Address: ${contracts.LP_LOCKER}`);
    
    if (stakingVault.toLowerCase() === contracts.LP_LOCKER.toLowerCase()) {
      log.success('‚úÖ Staking Vault –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ LPLocker –∫–æ–Ω—Ç—Ä–∞–∫—Ç');
    } else {
      log.error('‚ùå Staking Vault —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å');
      log.info('üîß –ù—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–ª–∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å');
    }
  } catch (error) {
    log.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error.message);
    return;
  }
  log.separator();

  log.info('üöÄ –ü–µ—Ä–µ–≤–æ–¥ VG —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ LPLocker –∫–æ–Ω—Ç—Ä–∞–∫—Ç:');
  try {
    const deployerBalance = await vgToken.balanceOf(deployer.address);
    
    // –ü–µ—Ä–µ–≤–æ–¥–∏–º 80% –æ—Ç –±–∞–ª–∞–Ω—Å–∞ deployer'–∞ (–æ—Å—Ç–∞–≤–ª—è–µ–º 20% –¥–ª—è —Ç–µ—Å—Ç–æ–≤)
    const transferAmount = (deployerBalance * 80n) / 100n;
    
    console.log(`–ü–µ—Ä–µ–≤–æ–¥–∏–º: ${ethers.formatEther(transferAmount)} VG`);
    console.log(`–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${contracts.LP_LOCKER}`);
    
    const tx = await vgToken.transfer(contracts.LP_LOCKER, transferAmount);
    console.log(`Transaction Hash: ${tx.hash}`);
    
    console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...');
    const receipt = await tx.wait();
    
    if (receipt.status === 1) {
      console.log('‚úÖ –ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã
      const newDeployerBalance = await vgToken.balanceOf(deployer.address);
      const newContractBalance = await vgToken.balanceOf(contracts.LP_LOCKER);
      
      console.log('\nüìä –ù–æ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã:');
      console.log(`Deployer VG Balance: ${ethers.formatEther(newDeployerBalance)} VG`);
      console.log(`LPLocker VG Balance: ${ethers.formatEther(newContractBalance)} VG`);
      
    } else {
      console.log('‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å');
    }
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: ${error.message}`);
  }
  console.log();

  console.log('üéâ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  console.log('üí° –¢–µ–ø–µ—Ä—å EarnVG –≤–∏–¥–∂–µ—Ç –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  }); 