const { ethers } = require("hardhat");
const fs = require("fs");

async function main() {
  const [deployer] = await ethers.getSigners();
  
  console.log("üîß Setting up VCSaleContract with account:", deployer.address);
  console.log("üí∞ Account balance:", ethers.formatEther(await deployer.provider.getBalance(deployer.address)));

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö
  const deployedData = fs.readFileSync("deployed-ecosystem.json", "utf8");
  const deployedContracts = JSON.parse(deployedData);

  const vcTokenAddress = deployedContracts.VC_TOKEN;
  const vcsaleAddress = deployedContracts.VCSaleContract;

  console.log("üìç VC Token Address:", vcTokenAddress);
  console.log("üìç VCSale Contract Address:", vcsaleAddress);

  // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º
  const vcToken = await ethers.getContractAt("VCToken", vcTokenAddress);
  const vcsaleContract = await ethers.getContractAt("VCSaleContract", vcsaleAddress);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  console.log("\nüìä Current State:");
  console.log("   - Deployer VC Balance:", ethers.formatEther(await vcToken.balanceOf(deployer.address)), "VC");
  console.log("   - Contract VC Balance:", ethers.formatEther(await vcToken.balanceOf(vcsaleAddress)), "VC");
  
  const saleConfig = await vcsaleContract.saleConfig();
  console.log("   - Sale Active:", saleConfig.saleActive);
  console.log("   - Price per VC:", ethers.formatEther(saleConfig.pricePerVC), "BNB");

  // –®–∞–≥ 1: –î–æ–±–∞–≤–ª—è–µ–º VC —Ç–æ–∫–µ–Ω—ã –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
  const contractBalance = await vcToken.balanceOf(vcsaleAddress);
  const desiredBalance = ethers.parseEther("10000"); // 10K VC –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

  if (contractBalance < desiredBalance) {
    console.log("\nüí∞ Adding VC tokens to contract...");
    const amountToAdd = desiredBalance - contractBalance;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å deployer'–∞
    const deployerBalance = await vcToken.balanceOf(deployer.address);
    console.log("   - Amount needed:", ethers.formatEther(amountToAdd), "VC");
    console.log("   - Deployer balance:", ethers.formatEther(deployerBalance), "VC");

    if (deployerBalance < amountToAdd) {
      console.log("‚ö†Ô∏è  Insufficient VC balance. Minting more VC...");
      const mintAmount = amountToAdd - deployerBalance + ethers.parseEther("1000"); // Extra buffer
      await vcToken.mintTo(deployer.address, mintAmount);
      console.log("‚úÖ Minted", ethers.formatEther(mintAmount), "VC");
    }

    // Approve VC tokens
    console.log("   - Approving VC tokens...");
    const approveTx = await vcToken.approve(vcsaleAddress, amountToAdd);
    await approveTx.wait();
    console.log("   - Approval confirmed");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ approve –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—Ä–∞–±–æ—Ç–∞–ª
    const allowance = await vcToken.allowance(deployer.address, vcsaleAddress);
    console.log("   - Allowance set:", ethers.formatEther(allowance), "VC");
    
    if (allowance < amountToAdd) {
      throw new Error("Approve failed - insufficient allowance");
    }
    
    // Deposit VC tokens
    console.log("   - Depositing VC tokens...");
    const depositTx = await vcsaleContract.depositVCTokens(amountToAdd);
    await depositTx.wait();
    console.log("   - Deposit confirmed");
    
    console.log("‚úÖ Added", ethers.formatEther(amountToAdd), "VC to contract");
  } else {
    console.log("‚úÖ Contract already has sufficient VC tokens");
  }

  // –®–∞–≥ 2: –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–¥–∞–∂—É (–µ—Å–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞)
  if (!saleConfig.saleActive) {
    console.log("\n‚ö° Activating sale...");
    const activateTx = await vcsaleContract.setSaleActive(true);
    await activateTx.wait();
    console.log("‚úÖ Sale activated!");
  } else {
    console.log("‚úÖ Sale is already active");
  }

  // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  console.log("\nüìà Final State:");
  const finalContractBalance = await vcToken.balanceOf(vcsaleAddress);
  const finalSaleConfig = await vcsaleContract.saleConfig();
  const stats = await vcsaleContract.getSaleStats();

  console.log("   - Contract VC Balance:", ethers.formatEther(finalContractBalance), "VC");
  console.log("   - Sale Active:", finalSaleConfig.saleActive);
  console.log("   - Available for Sale:", ethers.formatEther(stats.currentVCBalance), "VC");
  console.log("   - Price per VC:", ethers.formatEther(stats.pricePerVC), "BNB");
  console.log("   - Min Purchase:", ethers.formatEther(finalSaleConfig.minPurchaseAmount), "VC");
  console.log("   - Max Purchase:", ethers.formatEther(finalSaleConfig.maxPurchaseAmount), "VC");

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é canPurchase
  console.log("\nüß™ Testing purchase eligibility...");
  const testAmount = ethers.parseEther("10"); // 10 VC
  const [canPurchase, reason] = await vcsaleContract.canPurchase(deployer.address, testAmount);
  console.log("   - Can purchase 10 VC:", canPurchase);
  if (!canPurchase) {
    console.log("   - Reason:", reason);
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ BNB –Ω—É–∂–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –ø–æ–∫—É–ø–∫–∏
  if (canPurchase) {
    const requiredBNB = await vcsaleContract.calculateBNBAmount(testAmount);
    console.log("   - Required BNB for 10 VC:", ethers.formatEther(requiredBNB), "BNB");
  }

  console.log("\nüéØ VCSaleContract setup completed!");
  console.log("üåê Contract URL:", `https://testnet.bscscan.com/address/${vcsaleAddress}`);
  console.log("\nüìã Ready for frontend testing:");
  console.log("1. üåê Start frontend: npm run dev");
  console.log("2. üîó Connect wallet to BSC Testnet");
  console.log("3. üí∞ Ensure wallet has BNB for gas + purchase");
  console.log("4. üß™ Test VCSale widget functionality");
  
  console.log("\n‚ö†Ô∏è  Security Features Active:");
  console.log("üîê MEV Protection: 60 second cooldown between purchases");
  console.log("‚ö° Circuit Breaker: Auto-stop if >100K VC sold per hour");
  console.log("üìä Daily Limits: Max 1M VC sales per day");
  console.log("üõ°Ô∏è  Role-based access control enforced");
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error("‚ùå Setup failed:", error);
    process.exit(1);
  }); 