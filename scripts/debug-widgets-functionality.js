const { ethers } = require('hardhat');

async function main() {
  console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤–∏–¥–∂–µ—Ç–æ–≤...\n');

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏
  const [deployer] = await ethers.getSigners();
  const userAccount = "0xe70eC2DeA28CD14B2d392E72F2fE68F8d8799D5E"; // –¢–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç
  
  console.log('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏:');
  console.log(`Deployer: ${deployer.address}`);
  console.log(`User Account: ${userAccount}`);
  console.log(`Network: ${(await ethers.provider.getNetwork()).name}`);
  console.log(`Chain ID: ${(await ethers.provider.getNetwork()).chainId}\n`);

  // –ê–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
  const contracts = {
    VC_TOKEN: "0xC88eC091302Eb90e78a4CA361D083330752dfc9A",
    VG_TOKEN: "0xe87c0Ff36084033FfB56aCf68F2dD5857C65342d", 
    VG_TOKEN_VOTES: "0xA2aFF77bBaD0Fc5039698D9dc695bDE32A25CBeA",
    LP_LOCKER: "0x9269baba99cE0388Daf814E351b4d556fA728D32",
  };

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º
  const vcToken = await ethers.getContractAt("VCToken", contracts.VC_TOKEN);
  const vgToken = await ethers.getContractAt("VGToken", contracts.VG_TOKEN);
  const vgVotes = await ethers.getContractAt("VGTokenVotes", contracts.VG_TOKEN_VOTES);
  const lpLocker = await ethers.getContractAt("LPLocker", contracts.LP_LOCKER);

  console.log('üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
  try {
    const bnbBalance = await ethers.provider.getBalance(userAccount);
    const vcBalance = await vcToken.balanceOf(userAccount);
    const vgBalance = await vgToken.balanceOf(userAccount);
    const vgVotesBalance = await vgVotes.balanceOf(userAccount);
    
    console.log(`BNB: ${ethers.formatEther(bnbBalance)} BNB`);
    console.log(`VC: ${ethers.formatEther(vcBalance)} VC`);
    console.log(`VG: ${ethers.formatEther(vgBalance)} VG`);
    console.log(`VGVotes: ${ethers.formatEther(vgVotesBalance)} VGVotes`);
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤: ${error.message}`);
  }
  console.log();

  console.log('‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ LPLocker:');
  try {
    const config = await lpLocker.config();
    console.log(`Authority: ${config[0]}`);
    console.log(`VG Token: ${config[1]}`);
    console.log(`VC Token: ${config[2]}`);
    console.log(`Pancake Router: ${config[3]}`);
    console.log(`LP Token: ${config[4]}`);
    console.log(`Staking Vault: ${config[5]}`);
    console.log(`LP Divisor: ${config[6].toString()}`);
    console.log(`LP to VG Ratio: ${config[7].toString()}`);
    console.log(`Min BNB Amount: ${ethers.formatEther(config[8])} BNB`);
    console.log(`Min VC Amount: ${ethers.formatEther(config[9])} VC`);
    console.log(`Max Slippage BPS: ${config[10].toString()} (${(Number(config[10]) / 100).toFixed(1)}%)`);
    console.log(`Default Slippage BPS: ${config[11].toString()} (${(Number(config[11]) / 100).toFixed(1)}%)`);
    console.log(`MEV Protection Enabled: ${config[12]}`);
    console.log(`Min Time Between Txs: ${config[13].toString()} seconds`);
    console.log(`Max Tx Per User Per Block: ${config[14].toString()}`);
    console.log(`Total Locked LP: ${ethers.formatEther(config[15])} LP`);
    console.log(`Total VG Issued: ${ethers.formatEther(config[16])} VG`);
    console.log(`Total VG Deposited: ${ethers.formatEther(config[17])} VG`);
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${error.message}`);
  }
  console.log();

  console.log('üè¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ VG Vault (–¥–ª—è earnVG):');
  try {
    // Staking Vault —ç—Ç–æ —Å–∞–º LP Locker –∫–æ–Ω—Ç—Ä–∞–∫—Ç
    const vaultVGBalance = await vgToken.balanceOf(contracts.LP_LOCKER);
    const vaultAllowance = await vgToken.allowance(contracts.LP_LOCKER, contracts.LP_LOCKER);
    
    console.log(`Vault VG Balance: ${ethers.formatEther(vaultVGBalance)} VG`);
    console.log(`Vault Allowance to LPLocker: ${ethers.formatEther(vaultAllowance)} VG`);
    
    if (vaultVGBalance > ethers.parseEther("1000000")) { // 1M VG –º–∏–Ω–∏–º—É–º
      console.log('‚úÖ VG Vault –≥–æ—Ç–æ–≤ –¥–ª—è earnVG –æ–ø–µ—Ä–∞—Ü–∏–π');
    } else {
      console.log('‚ùå VG Vault –Ω–µ –≥–æ—Ç–æ–≤ - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ VG –¥–ª—è –Ω–∞–≥—Ä–∞–¥');
    }
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ VG Vault: ${error.message}`);
  }
  console.log();

  console.log('üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ allowances –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
  try {
    const vcAllowanceToLPLocker = await vcToken.allowance(userAccount, contracts.LP_LOCKER);
    const vgAllowanceToVGVotes = await vgToken.allowance(userAccount, contracts.VG_TOKEN_VOTES);
    
    console.log(`VC allowance to LPLocker: ${ethers.formatEther(vcAllowanceToLPLocker)} VC`);
    console.log(`VG allowance to VGVotes: ${ethers.formatEther(vgAllowanceToVGVotes)} VG`);
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è allowances: ${error.message}`);
  }
  console.log();

  console.log('‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ MEV Protection –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
  try {
    const lastTxTimestamp = await lpLocker.lastUserTxTimestamp(userAccount);
    const lastTxBlock = await lpLocker.lastUserTxBlock(userAccount);
    const currentTimestamp = Math.floor(Date.now() / 1000);
    const currentBlock = await ethers.provider.getBlockNumber();
    
    console.log(`Last Tx Timestamp: ${lastTxTimestamp.toString()} (${new Date(Number(lastTxTimestamp) * 1000).toLocaleString()})`);
    console.log(`Last Tx Block: ${lastTxBlock.toString()}`);
    console.log(`Current Timestamp: ${currentTimestamp}`);
    console.log(`Current Block: ${currentBlock}`);
    
    const timeSinceLastTx = currentTimestamp - Number(lastTxTimestamp);
    console.log(`Time since last tx: ${timeSinceLastTx} seconds`);
    
    const config = await lpLocker.config();
    const mevEnabled = config[12];
    const minTimeBetween = Number(config[13]);
    
    if (mevEnabled && timeSinceLastTx < minTimeBetween) {
      console.log(`‚ùå MEV Protection –∞–∫—Ç–∏–≤–Ω–∞ - –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å ${minTimeBetween - timeSinceLastTx} —Å–µ–∫—É–Ω–¥`);
    } else {
      console.log('‚úÖ MEV Protection –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
    }
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ MEV Protection: ${error.message}`);
  }
  console.log();

  console.log('üß™ –°–∏–º—É–ª—è—Ü–∏—è earnVG (1000 VC + 0.1 BNB):');
  try {
    const vcAmount = ethers.parseEther("1000");
    const bnbAmount = ethers.parseEther("0.1");
    const slippage = 1000; // 10%
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤
    const userVCBalance = await vcToken.balanceOf(userAccount);
    const userBNBBalance = await ethers.provider.getBalance(userAccount);
    
    console.log(`–¢—Ä–µ–±—É–µ—Ç—Å—è VC: ${ethers.formatEther(vcAmount)} VC`);
    console.log(`–î–æ—Å—Ç—É–ø–Ω–æ VC: ${ethers.formatEther(userVCBalance)} VC`);
    console.log(`–¢—Ä–µ–±—É–µ—Ç—Å—è BNB: ${ethers.formatEther(bnbAmount)} BNB`);
    console.log(`–î–æ—Å—Ç—É–ø–Ω–æ BNB: ${ethers.formatEther(userBNBBalance)} BNB`);
    
    if (userVCBalance >= vcAmount && userBNBBalance >= bnbAmount) {
      console.log('‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è earnVG');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º allowance
      const vcAllowance = await vcToken.allowance(userAccount, contracts.LP_LOCKER);
      if (vcAllowance >= vcAmount) {
        console.log('‚úÖ VC allowance –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω');
      } else {
        console.log(`‚ùå –ù—É–∂–µ–Ω approve VC: ${ethers.formatEther(vcAmount - vcAllowance)} VC`);
      }
    } else {
      console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è earnVG');
    }
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ earnVG: ${error.message}`);
  }
  console.log();

  console.log('üîÑ –°–∏–º—É–ª—è—Ü–∏—è VG ‚Üí VGVotes (10 VG):');
  try {
    const vgAmount = ethers.parseEther("10");
    
    const userVGBalance = await vgToken.balanceOf(userAccount);
    console.log(`–¢—Ä–µ–±—É–µ—Ç—Å—è VG: ${ethers.formatEther(vgAmount)} VG`);
    console.log(`–î–æ—Å—Ç—É–ø–Ω–æ VG: ${ethers.formatEther(userVGBalance)} VG`);
    
    if (userVGBalance >= vgAmount) {
      console.log('‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ VG –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º allowance
      const vgAllowance = await vgToken.allowance(userAccount, contracts.VG_TOKEN_VOTES);
      if (vgAllowance >= vgAmount) {
        console.log('‚úÖ VG allowance –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω');
      } else {
        console.log(`‚ùå –ù—É–∂–µ–Ω approve VG: ${ethers.formatEther(vgAmount - vgAllowance)} VG`);
      }
    } else {
      console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ VG –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏');
    }
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ VG ‚Üí VGVotes: ${error.message}`);
  }
  console.log();

  console.log('üìä –ò—Ç–æ–≥–æ–≤–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:');
  console.log('='.repeat(50));
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –¥–ª—è earnVG
  try {
    const config = await lpLocker.config();
    const vaultBalance = await vgToken.balanceOf(contracts.LP_LOCKER);
    const vaultAllowance = await vgToken.allowance(contracts.LP_LOCKER, contracts.LP_LOCKER);
    const userVCBalance = await vcToken.balanceOf(userAccount);
    const userBNBBalance = await ethers.provider.getBalance(userAccount);
    const mevEnabled = config[12];
    
    console.log('\nüéØ EarnVG Widget:');
    if (vaultBalance > ethers.parseEther("1000000")) { // 1M VG –º–∏–Ω–∏–º—É–º
      console.log('‚úÖ VG Vault –≥–æ—Ç–æ–≤');
    } else {
      console.log('‚ùå VG Vault –Ω–µ –≥–æ—Ç–æ–≤');
    }
    
    if (userVCBalance > 0 && userBNBBalance > ethers.parseEther("0.01")) {
      console.log('‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞');
    } else {
      console.log('‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
    }
    
    if (!mevEnabled) {
      console.log('‚úÖ MEV Protection –æ—Ç–∫–ª—é—á–µ–Ω–∞');
    } else {
      console.log('‚ö†Ô∏è MEV Protection –≤–∫–ª—é—á–µ–Ω–∞');
    }
    
    console.log(`Max Slippage: ${(Number(config[10]) / 100).toFixed(1)}%`);
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ earnVG: ${error.message}`);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –¥–ª—è VGConverter
  try {
    const userVGBalance = await vgToken.balanceOf(userAccount);
    const userVGVotesBalance = await vgVotes.balanceOf(userAccount);
    
    console.log('\nüîÑ VGConverter Widget:');
    if (userVGBalance > 0) {
      console.log('‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å VG –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏');
    } else {
      console.log('‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç VG');
    }
    
    if (userVGVotesBalance > 0) {
      console.log('‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å VGVotes –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏');
    } else {
      console.log('‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç VGVotes');
    }
    
    console.log('‚úÖ VGConverter –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ VGConverter: ${error.message}`);
  }
  
  console.log('\nüéâ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
    process.exit(1);
  }); 