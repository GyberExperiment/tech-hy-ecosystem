name: 🚀 TECH HY Ecosystem CI/CD

on:
  push:
    branches: [ main, stage-debugging, prod ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 🎨 Frontend Build & Test
  frontend-build:
    name: 🎨 Frontend Build & Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 🔧 Install Dependencies
        run: npm ci

      - name: 🔍 Type Check
        run: npm run type-check

      - name: 🎯 Lint Code
        run: npm run lint -- --max-warnings 250

      # - name: 🧪 Run Tests
      #   run: npm run test:coverage

      - name: 🏗️ Build Production
        run: |
          # Copy appropriate env file based on branch
          if [[ "${{ github.ref }}" == "refs/heads/prod" ]]; then
            cp config/production.env .env
            echo "🚀 Building for PRODUCTION (mainnet)"
          else
            cp config/staging.env .env
            echo "🎯 Building for STAGING (testnet)"
          fi
          
          # Build with environment variables
          npm run build
        env:
          NODE_ENV: production

      - name: 📦 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist/
          retention-days: 1

  # 🐳 Docker Build & Push
  docker-build:
    name: 🐳 Docker Build & Push
    runs-on: ubuntu-latest
    needs: [ frontend-build]
    if: github.ref == 'refs/heads/stage-debugging' || github.ref == 'refs/heads/prod'
    permissions:
      contents: read
      packages: write
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist/

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.11.0

      - name: 🔐 Login to GitHub Container Registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: 📋 Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=production-latest,enable=${{ github.ref == 'refs/heads/prod' }}
            type=raw,value=staging-latest,enable=${{ github.ref == 'refs/heads/stage-debugging' }}

      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v6.9.0
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 🚀 Deploy to K3S Production
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/prod'
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.29.0'

      - name: 📝 Setup Kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: 🔍 Verify K3S Connection
        run: |
          kubectl cluster-info
          kubectl get nodes

      - name: 🎯 Deploy to Production
        run: |
          # Apply production kustomization
          kubectl apply -k k8s-new/overlays/prod

      - name: 🕒 Wait for Deployment
        run: |
          kubectl rollout status deployment/techhy-ecosystem-prod-deployment -n default --timeout=300s

      - name: ✅ Verify Production Deployment
        run: |
          kubectl get pods -l app=techhy-ecosystem-prod -n default
          kubectl get services -l app=techhy-ecosystem-prod -n default

  # 🎯 Deploy to K3S Staging
  deploy-staging:
    name: 🎯 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/stage-debugging'
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.29.0'

      - name: 📝 Setup Kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: 🔍 Verify K3S Connection
        run: |
          kubectl cluster-info
          kubectl get nodes

      - name: 🎯 Deploy to Staging
        run: |
          # Apply staging kustomization
          kubectl apply -k k8s-new/overlays/stage

      - name: 🕒 Wait for Deployment
        run: |
          kubectl rollout status deployment/techhy-ecosystem-stage-deployment -n techhy-ecosystem-staging --timeout=300s

      - name: ✅ Verify Staging Deployment
        run: |
          kubectl get pods -l app=techhy-ecosystem-stage -n techhy-ecosystem-staging
          kubectl get services -l app=techhy-ecosystem-stage -n techhy-ecosystem-staging 