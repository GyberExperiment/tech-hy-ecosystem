name: 🚀 TECH HY Ecosystem CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # # 🧪 Smart Contracts Testing
  # smart-contracts-test:
  #   name: 🔗 Smart Contracts Tests
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: 📥 Checkout Code
  #       uses: actions/checkout@v4

  #     - name: 📦 Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'
  #         cache: 'npm'

  #     - name: 🔧 Install Dependencies
  #       run: npm ci

  #     - name: 🔨 Compile Contracts
  #       run: npm run compile

  #     - name: 🧪 Run Tests
  #       run: npm run test

  #     - name: 📊 Coverage Report
  #       run: npm run coverage

  #     - name: 📈 Upload Coverage
  #       uses: codecov/codecov-action@v4
  #       with:
  #         file: ./coverage/lcov.info
  #         fail_ci_if_error: false

  # 🎨 Frontend Build & Test
  frontend-build:
    name: 🎨 Frontend Build & Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 🔧 Install Dependencies
        run: npm ci

      - name: 🔍 Type Check
        run: npm run type-check

      - name: 🎯 Lint Code
        run: npm run lint -- --max-warnings 250

      # - name: 🧪 Run Tests
      #   run: npm run test:coverage

      - name: 🏗️ Build Production
        run: npm run build
        env:
          NODE_ENV: production

      - name: 📦 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist/
          retention-days: 1

  # 🐳 Docker Build & Push
  docker-build:
    name: 🐳 Docker Build & Push
    runs-on: ubuntu-latest
    needs: [ frontend-build]
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist/

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.11.0

      - name: 🔐 Login to GitHub Container Registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: 📋 Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v6.9.0
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 🚀 Deploy to K3S
  deploy-k3s:
    name: 🚀 Deploy to K3S
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.29.0'

      - name: 📝 Setup Kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: 🔍 Verify K3S Connection
        run: |
          kubectl cluster-info
          kubectl get nodes

      - name: 🎯 Deploy to Kubernetes
        run: |
          # Substitute environment variables in k8s manifests
          export IMAGE_TAG="${{ github.sha }}"
          export NAMESPACE="techhy-ecosystem"
          
          # Apply Kubernetes manifests
          kubectl apply -f k8s/namespace.yaml
          envsubst < k8s/deployment.yaml | kubectl apply -f -
          kubectl apply -f k8s/service.yaml
          kubectl apply -f k8s/ingress.yaml

      - name: 🕒 Wait for Deployment
        run: |
          kubectl rollout status deployment/techhy-ecosystem-frontend -n techhy-ecosystem --timeout=300s

      - name: ✅ Verify Deployment
        run: |
          kubectl get pods -n techhy-ecosystem
          kubectl get services -n techhy-ecosystem
          kubectl get ingress -n techhy-ecosystem

      - name: 🎉 Deployment Success Notification
        if: success()
        run: |
          echo "🎉 TECH HY Ecosystem successfully deployed to K3S!"
          echo "🌐 Frontend URL: https://stage.techhyecosystem.build.infra.gyber.org"
          echo "📊 Check status: kubectl get all -n techhy-ecosystem" 