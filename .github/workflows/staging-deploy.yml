name: 🎭 TECH HY Staging Deploy

on:
  push:
    branches: [ stage-debugging ]
  pull_request:
    branches: [ stage-debugging ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 🧪 Smart Contracts Testing for Staging
  staging-contracts-test:
    name: 🔗 Staging Contracts Tests
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 🔧 Install Dependencies
        run: npm ci

      - name: 🔨 Compile Contracts
        run: npm run compile

      - name: 🧪 Run Tests
        run: npm run test

  # 🎨 Frontend Build for Staging
  staging-frontend-build:
    name: 🎨 Staging Frontend Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 🔧 Install Dependencies
        run: npm ci

      - name: 🔍 Type Check
        run: npm run type-check

      - name: 🎯 Lint Code
        run: npm run lint

      - name: 🧪 Run Tests
        run: npm run test:coverage

      - name: 🏗️ Build Staging
        run: npm run build
        env:
          NODE_ENV: production
          REACT_APP_ENVIRONMENT: staging

      - name: 📦 Upload Staging Build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-staging-dist
          path: frontend/dist/
          retention-days: 7

  # 🐳 Docker Build & Push for Staging
  staging-docker-build:
    name: 🐳 Staging Docker Build
    runs-on: ubuntu-latest
    needs: [staging-contracts-test, staging-frontend-build]
    if: github.ref == 'refs/heads/stage-debugging'
    permissions:
      contents: read
      packages: write
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-staging-dist
          path: frontend/dist/

      - name: 🐳 Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📋 Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch,suffix=-staging
            type=sha,prefix=staging-
            type=raw,value=staging-latest

      - name: 🏗️ Build and Push Staging Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 🚀 Deploy to Staging K3S
  deploy-staging-k3s:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [staging-docker-build]
    if: github.ref == 'refs/heads/stage-debugging'
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.29.0'

      - name: 📝 Setup Kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: 🔍 Verify K3S Connection
        run: |
          kubectl cluster-info
          kubectl get nodes

      - name: 🎯 Deploy to Staging K3S
        run: |
          # Set staging environment variables
          export IMAGE_TAG="staging-${{ github.sha }}"
          export NAMESPACE="techhy-ecosystem-staging"
          
          # Create staging namespace
          kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
          
          # Apply staging configurations
          envsubst < k8s/namespace.yaml | sed 's/techhy-ecosystem/techhy-ecosystem-staging/g' | sed 's/production/staging/g' | kubectl apply -f -
          envsubst < k8s/configmap.yaml | sed 's/techhy-ecosystem/techhy-ecosystem-staging/g' | kubectl apply -f -
          envsubst < k8s/deployment.yaml | sed 's/techhy-ecosystem/techhy-ecosystem-staging/g' | sed 's/production/staging/g' | kubectl apply -f -
          envsubst < k8s/service.yaml | sed 's/techhy-ecosystem/techhy-ecosystem-staging/g' | kubectl apply -f -
          envsubst < k8s/ingress.yaml | sed 's/techhy-ecosystem/techhy-ecosystem-staging/g' | kubectl apply -f -

      - name: 🕒 Wait for Staging Deployment
        run: |
          kubectl rollout status deployment/techhy-ecosystem-frontend -n techhy-ecosystem-staging --timeout=600s

      - name: ✅ Verify Staging Deployment
        run: |
          kubectl get pods -n techhy-ecosystem-staging
          kubectl get services -n techhy-ecosystem-staging
          kubectl get ingress -n techhy-ecosystem-staging

      - name: 🔍 Health Check
        run: |
          echo "⏳ Waiting for application to be ready..."
          sleep 30
          
          # Check if the staging URL is accessible
          if curl -f -s --max-time 10 "https://stage.techhyecosystem.build.infra.gyber.org/health" > /dev/null; then
            echo "✅ Staging health check passed!"
          else
            echo "⚠️ Health check failed, but deployment completed"
          fi

      - name: 🎉 Staging Deployment Success
        if: success()
        run: |
          echo "🎉 TECH HY Ecosystem successfully deployed to Staging!"
          echo "🌐 Staging URL: https://stage.techhyecosystem.build.infra.gyber.org"
          echo "🔧 Branch: stage-debugging"
          echo "📊 Namespace: techhy-ecosystem-staging"
          echo "🏷️ Image Tag: staging-${{ github.sha }}" 