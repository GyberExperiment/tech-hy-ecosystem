name: üöÄ Main Production Deploy - techhy.app

on:
  push:
    branches: [ main ]

# Prevent concurrent deployments to main environment
concurrency:
  group: main-environment-${{ github.repository }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: gyberexperiment/tech-hy-ecosystem

jobs:
  # üé® Frontend Build for Main Production
  main-frontend-build:
    name: üé® Main Frontend Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: üîß Install Dependencies
        run: npm ci

      - name: üèóÔ∏è Build Main Production
        run: npm run build
        env:
          NODE_ENV: production
          REACT_APP_ENVIRONMENT: production

      - name: üì¶ Upload Main Build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-main-dist
          path: frontend/dist/
          retention-days: 7

  # üê≥ Docker Build & Push for Main Production
  main-docker-build:
    name: üê≥ Main Docker Build
    runs-on: ubuntu-latest
    needs: [main-frontend-build]
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.image-tag.outputs.tag }}
      unique-tag: ${{ steps.image-tag.outputs.unique-tag }}
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üì¶ Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-main-dist
          path: frontend/dist/

      - name: üè∑Ô∏è Create Unique Image Tag
        id: image-tag
        run: |
          UNIQUE_TAG="main-$(date +%Y%m%d-%H%M%S)-${{ github.sha }}"
          echo "unique-tag=$UNIQUE_TAG" >> $GITHUB_OUTPUT
          echo "tag=ghcr.io/gyberexperiment/tech-hy-ecosystem:$UNIQUE_TAG" >> $GITHUB_OUTPUT
          echo "üè∑Ô∏è Created unique tag: $UNIQUE_TAG"

      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.11.0

      - name: üîê Login to GitHub Container Registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: üìã Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ steps.image-tag.outputs.unique-tag }}
            type=raw,value=main-latest

      - name: üèóÔ∏è Build and push Docker image
        id: build
        uses: docker/build-push-action@v6.9.0
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # üöÄ Deploy to Main Production K3S
  deploy-main-k3s:
    name: üöÄ Deploy to Main Production
    runs-on: ubuntu-latest
    needs: [main-docker-build]
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üîß Setup Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.29.0'

      - name: üìù Setup Kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: üîç Verify K3S Connection
        run: |
          kubectl cluster-info
          kubectl get nodes

      - name: üéØ Deploy to Main Production K3S
        run: |
          # Set main production environment variables
          export NAMESPACE="techhy-main-production"
          export UNIQUE_TAG="${{ needs.main-docker-build.outputs.unique-tag }}"
          export IMAGE_TAG="${{ needs.main-docker-build.outputs.image-tag }}"
          
          echo "üè∑Ô∏è Using Docker-built image tag: $UNIQUE_TAG"
          echo "üè∑Ô∏è Full image path: $IMAGE_TAG"
          
          # Create main production namespace first
          kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
          
          # Create GHCR imagePullSecret after namespace exists
          kubectl create secret docker-registry ghcr-login \
            --docker-server=ghcr.io \
            --docker-username="${{ github.actor }}" \
            --docker-password="${{ secrets.GHCR_TOKEN }}" \
            --docker-email="dev@techhy.app" \
            -n $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
          
          # Apply main production configurations using kustomize
          kubectl apply -k k8s/overlays/main-production/
          
          # ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–∑ –≤ –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–µ–≥–æ–º –∏–∑ Docker build
          echo "üîÑ Updating deployment with Docker-built image..."
          kubectl set image deployment/main-techhy-main-production-deployment \
            techhy-main-frontend=$IMAGE_TAG \
            -n $NAMESPACE
          
          # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è rollout
          echo "‚è≥ Waiting for deployment rollout..."
          kubectl rollout status deployment/main-techhy-main-production-deployment \
            -n $NAMESPACE --timeout=300s

      - name: üîç Health Check & Rollback Protection
        run: |
          echo "üîç Starting health validation..."
          
          # Function to check application health
          check_health() {
            local url="https://techhy.app/"
            local max_attempts=5
            local wait_time=10
            
            for i in $(seq 1 $max_attempts); do
              echo "üìä Health check attempt $i/$max_attempts..."
              
              # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥
              local http_status=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 "$url")
              
              if [ "$http_status" = "200" ]; then
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ HTML
                if curl -f -s --max-time 10 "$url" | grep -qi "<!doctype html"; then
                  echo "‚úÖ Health check passed on attempt $i (HTTP $http_status)"
                  return 0
                else
                  echo "‚ùå HTTP 200 but HTML content check failed on attempt $i"
                fi
              else
                echo "‚ùå HTTP status $http_status on attempt $i"
              fi
              
              if [ $i -lt $max_attempts ]; then
                echo "‚è≥ Waiting ${wait_time}s before retry..."
                sleep $wait_time
              fi
            done
            
            echo "üí• Health check failed after $max_attempts attempts"
            return 1
          }
          
          # Additional wait for service to be fully ready
          echo "‚è≥ Waiting for service to be ready..."
          sleep 15
          
          # Perform health checks
          if ! check_health; then
            echo "üí• Health check validation FAILED! Initiating automatic rollback..."
            
            # Rollback to previous version
            echo "üîô Rolling back to previous working version..."
            kubectl rollout undo deployment/main-techhy-main-production-deployment \
              -n techhy-main-production
            
            # Wait for rollback to complete
            echo "‚è≥ Waiting for rollback to complete..."
            kubectl rollout status deployment/main-techhy-main-production-deployment \
              -n techhy-main-production --timeout=300s
            
            # Verify rollback health
            echo "üîç Verifying rollback health..."
            sleep 20
            if check_health; then
              echo "‚úÖ Rollback successful - application is healthy"
              echo "üí° Deployment failed but was automatically rolled back to working state"
              exit 1  # Still fail the pipeline to indicate deployment issue
            else
              echo "üí• CRITICAL: Rollback also failed! Manual intervention required!"
              exit 1
            fi
          fi
          
          echo "üéâ Health check validation PASSED! Deployment is healthy and ready."

      - name: ‚úÖ Final Deployment Validation
        run: |
          echo "üìä Final deployment status validation..."
          kubectl get pods -n techhy-main-production -l app=techhy-main-production
          kubectl get services -n techhy-main-production  
          
          # Verify all pods are running
          RUNNING_PODS=$(kubectl get pods -n techhy-main-production \
            -l app=techhy-main-production \
            --field-selector=status.phase=Running --no-headers | wc -l)
          EXPECTED_PODS=2
          
          if [ "$RUNNING_PODS" -eq "$EXPECTED_PODS" ]; then
            echo "‚úÖ All $EXPECTED_PODS pods are running successfully"
          else
            echo "‚ö†Ô∏è Warning: Expected $EXPECTED_PODS pods, but only $RUNNING_PODS are running"
          fi
          
          # Show current image being used
          echo "üè∑Ô∏è Current image in deployment:"
          kubectl get deployment/main-techhy-main-production-deployment \
            -n techhy-main-production \
            -o jsonpath='{.spec.template.spec.containers[0].image}'
          echo ""

      - name: üéâ Main Production Deployment Success
        if: success()
        run: |
          echo "üéâ TECH HY Ecosystem successfully deployed to Main Production!"
          echo "üåê Production URL: https://techhy.app"
          echo "üåê Production URL (www): https://www.techhy.app"
          echo "üîß Branch: main"
          echo "üìä Namespace: techhy-main-production"
          echo "üè∑Ô∏è Image Tag: ${{ needs.main-docker-build.outputs.unique-tag }}"
          echo "üì¶ Full Image: ${{ needs.main-docker-build.outputs.image-tag }}" 