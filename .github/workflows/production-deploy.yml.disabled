name: üöÄ TECH HY Production Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Prevent concurrent deployments to production environment
concurrency:
  group: production-environment-${{ github.repository }}
  cancel-in-progress: false  # –í production –Ω–µ –æ—Ç–º–µ–Ω—è–µ–º –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç—ã

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # üß™ Smart Contracts Testing - –£–ü–†–û–©–ï–ù–û –î–õ–Ø –ë–´–°–¢–†–û–ì–û –§–ò–ö–°–ê
  production-contracts-test:
    name: üîó Production Contracts Tests
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: üîß Install Dependencies
        run: npm ci

      - name: üî® Compile Contracts
        run: npm run compile

      - name: üß™ Run Tests
        run: npm run test

      - name: üìä Generate Test Report
        if: always()
        run: |
          echo "üìä Test Results Summary:"
          echo "‚úÖ Basic Tests Completed"

  # üîí Security Audit - –£–ü–†–û–©–ï–ù–û
  production-security-audit:
    name: üîí Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: üîß Install Dependencies
        run: npm ci

      - name: üîç Basic Security Check
        run: |
          echo "üõ°Ô∏è Running basic security checks..."
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
          if grep -r "selfdestruct\|suicide" contracts/ --exclude-dir=mocks; then
            echo "‚ö†Ô∏è Warning: selfdestruct found in contracts"
          fi
          
          if grep -r "tx.origin" contracts/ --exclude-dir=mocks; then
            echo "üö´ Error: tx.origin usage found - security risk!"
            exit 1
          fi
          
          echo "‚úÖ Basic security checks passed"

  # üé® Frontend Build for Production
  production-frontend-build:
    name: üé® Production Frontend Build
    runs-on: ubuntu-latest
    needs: [production-contracts-test, production-security-audit]
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: üîß Install Dependencies
        run: npm ci

      - name: üîç Type Check
        run: npm run type-check

      - name: üß™ Frontend Tests
        run: npm run test

      - name: üèóÔ∏è Build Production
        run: npm run build
        env:
          NODE_ENV: production
          REACT_APP_ENVIRONMENT: production

      - name: üì¶ Upload Production Build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-production-dist
          path: frontend/dist/
          retention-days: 30  # –ë–æ–ª—å—à–µ –¥–ª—è production

  # üê≥ Docker Build & Push for Production
  production-docker-build:
    name: üê≥ Production Docker Build
    runs-on: ubuntu-latest
    needs: [production-frontend-build]
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üì¶ Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-production-dist
          path: frontend/dist/

      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.11.0

      - name: üîê Login to GitHub Container Registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: üìã Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch,suffix=-production
            type=sha,prefix=production-
            type=raw,value=production-latest
            type=semver,pattern={{version}}

      - name: üèóÔ∏è Build and push Docker image
        uses: docker/build-push-action@v6.9.0
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # üöÄ Deploy to Production K3S
  deploy-production-k3s:
    name: üöÄ Deploy to Production
    runs-on: ubuntu-latest
    needs: [production-docker-build]
    if: github.ref == 'refs/heads/main'
    environment: production  # –¢—Ä–µ–±—É–µ—Ç manual approval
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üîß Setup Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.29.0'

      - name: üìù Setup Kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG_PROD }}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: üîç Verify K3S Connection
        run: |
          kubectl cluster-info
          kubectl get nodes

      - name: üéØ Deploy to Production K3S
        run: |
          # Set production environment variables
          export IMAGE_TAG="production-latest"
          export NAMESPACE="techhy-ecosystem-production"
          
          # Create production namespace first
          kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
          
          # Create GHCR imagePullSecret
          kubectl create secret docker-registry ghcr-login \
            --docker-server=ghcr.io \
            --docker-username="${{ secrets.GHCR_USERNAME }}" \
            --docker-password="${{ secrets.GHCR_TOKEN }}" \
            --docker-email="support@techhy.me" \
            -n $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
          
          # Apply production configurations using kustomize
          kubectl apply -k k8s/overlays/prod/

      - name: üîç Production Health Check & Rollback Protection
        run: |
          echo "üîç Starting production health validation..."
          
          # Function to check application health
          check_health() {
            local url="https://techhy.me/"
            local max_attempts=15  # –ë–æ–ª—å—à–µ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è production
            local wait_time=30
            
            for i in $(seq 1 $max_attempts); do
              echo "üìä Production health check attempt $i/$max_attempts..."
              
              if curl -f -s --max-time 15 "$url" | grep -q "html"; then
                echo "‚úÖ Production health check passed on attempt $i"
                return 0
              else
                echo "‚ùå Production health check failed on attempt $i"
                if [ $i -lt $max_attempts ]; then
                  echo "‚è≥ Waiting ${wait_time}s before retry..."
                  sleep $wait_time
                fi
              fi
            done
            
            echo "üí• Production health check failed after $max_attempts attempts"
            return 1
          }
          
          # Wait for pods to be ready
          echo "‚è≥ Waiting for production deployment rollout..."
          if ! kubectl rollout status deployment/techhy-ecosystem-production-deployment -n techhy-ecosystem-production --timeout=600s; then
            echo "üí• Production deployment rollout failed! Initiating rollback..."
            kubectl rollout undo deployment/techhy-ecosystem-production-deployment -n techhy-ecosystem-production
            exit 1
          fi
          
          # Additional wait for service to be fully ready
          echo "‚è≥ Waiting for production service to be ready..."
          sleep 120  # –ë–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è production
          
          # Perform health checks
          if ! check_health; then
            echo "üí• CRITICAL: Production health check FAILED! Initiating automatic rollback..."
            
            # Get current deployment revision
            current_revision=$(kubectl rollout history deployment/techhy-ecosystem-production-deployment -n techhy-ecosystem-production --revision=0 | tail -n1 | awk '{print $1}')
            echo "üìä Current production revision: $current_revision"
            
            # Rollback to previous version
            echo "üîô Rolling back production to previous working version..."
            kubectl rollout undo deployment/techhy-ecosystem-production-deployment -n techhy-ecosystem-production
            
            # Wait for rollback to complete
            echo "‚è≥ Waiting for production rollback to complete..."
            kubectl rollout status deployment/techhy-ecosystem-production-deployment -n techhy-ecosystem-production --timeout=600s
            
            # Verify rollback health
            echo "üîç Verifying production rollback health..."
            sleep 60
            if check_health; then
              echo "‚úÖ Production rollback successful - application is healthy"
              echo "üí° Production deployment failed but was automatically rolled back"
              exit 1
            else
              echo "üí• CRITICAL EMERGENCY: Production rollback also failed! IMMEDIATE MANUAL INTERVENTION REQUIRED!"
              # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Slack/Discord
              curl -X POST -H 'Content-type: application/json' \
                --data '{"text":"üö® CRITICAL: TECH HY Production deployment AND rollback failed! Manual intervention required immediately!"}' \
                ${{ secrets.SLACK_WEBHOOK_URL }} || true
              exit 1
            fi
          fi
          
          echo "üéâ Production health check validation PASSED! Deployment is healthy and ready."

      - name: ‚úÖ Final Production Validation
        run: |
          echo "üìä Final production deployment status validation..."
          kubectl get pods -n techhy-ecosystem-production -l app=techhy-ecosystem-production
          kubectl get services -n techhy-ecosystem-production  
          kubectl get ingress -n techhy-ecosystem-production
          
          # Verify all pods are running
          RUNNING_PODS=$(kubectl get pods -n techhy-ecosystem-production -l app=techhy-ecosystem-production --field-selector=status.phase=Running --no-headers | wc -l)
          EXPECTED_PODS=3  # Production –∏–º–µ–µ—Ç –±–æ–ª—å—à–µ —Ä–µ–ø–ª–∏–∫
          
          if [ "$RUNNING_PODS" -eq "$EXPECTED_PODS" ]; then
            echo "‚úÖ All $EXPECTED_PODS production pods are running successfully"
          else
            echo "‚ö†Ô∏è Warning: Expected $EXPECTED_PODS pods, but only $RUNNING_PODS are running"
          fi

      - name: üéâ Production Deployment Success
        if: success()
        run: |
          echo "üéâ TECH HY Ecosystem successfully deployed to PRODUCTION!"
          echo "üåê Live at: https://techhy.me/"
          
          # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç–µ
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"üéâ TECH HY Ecosystem successfully deployed to production! üöÄ"}' \
            ${{ secrets.SLACK_WEBHOOK_URL }} || true 