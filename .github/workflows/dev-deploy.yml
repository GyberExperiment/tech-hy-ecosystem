name: 🧪 TECH HY Development Deploy

on:
  push:
    branches: [ develop, staging ]
  pull_request:
    branches: [ develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 🔍 Quick Tests for Development
  dev-tests:
    name: 🧪 Development Tests
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 🔧 Install Dependencies
        run: npm ci

      - name: 🔨 Compile Contracts
        run: npm run compile

      - name: 🧪 Quick Tests
        run: npm run test

  # 🎨 Frontend Development Build
  frontend-dev-build:
    name: 🎨 Frontend Dev Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 🔧 Install Dependencies
        run: npm ci

      - name: 🔍 Type Check
        run: npm run type-check

      - name: 🎯 Lint Code
        run: npm run lint -- --max-warnings 250

      - name: 🏗️ Build Development
        run: npm run build
        env:
          NODE_ENV: development
          REACT_APP_ENVIRONMENT: development

      - name: 📦 Upload Dev Build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dev-dist
          path: frontend/dist/
          retention-days: 3

  # 🐳 Development Docker Build
  docker-dev-build:
    name: 🐳 Dev Docker Build
    runs-on: ubuntu-latest
    needs: [dev-tests, frontend-dev-build]
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging'
    permissions:
      contents: read
      packages: write
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-dev-dist
          path: frontend/dist/

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.11.0

      - name: 🔐 Login to GitHub Container Registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: 📋 Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch,suffix=-dev
            type=sha,prefix=dev-

      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v6.9.0
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 🚀 Deploy to Development K3S
  deploy-dev-k3s:
    name: 🚀 Deploy to Dev Environment
    runs-on: ubuntu-latest
    needs: [docker-dev-build]
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.29.0'

      - name: 📝 Setup Kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: 🎯 Deploy to Development K3S
        run: |
          # Set development environment variables
          export IMAGE_TAG="dev-${{ github.sha }}"
          export NAMESPACE="techhy-ecosystem-dev"
          
          # Create development namespace
          kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
          
          # Apply development configurations
          envsubst < k8s/namespace.yaml | sed 's/techhy-ecosystem/techhy-ecosystem-dev/g' | kubectl apply -f -
          envsubst < k8s/configmap.yaml | sed 's/techhy-ecosystem/techhy-ecosystem-dev/g' | kubectl apply -f -
          envsubst < k8s/deployment.yaml | sed 's/techhy-ecosystem/techhy-ecosystem-dev/g' | sed 's/production/development/g' | kubectl apply -f -
          envsubst < k8s/service.yaml | sed 's/techhy-ecosystem/techhy-ecosystem-dev/g' | kubectl apply -f -

      - name: 🕒 Wait for Development Deployment
        run: |
          kubectl rollout status deployment/techhy-ecosystem-frontend -n techhy-ecosystem-dev --timeout=300s

      - name: ✅ Verify Development Deployment
        run: |
          kubectl get pods -n techhy-ecosystem-dev
          kubectl get services -n techhy-ecosystem-dev

      - name: 🎉 Development Deployment Success
        if: success()
        run: |
          echo "🎉 TECH HY Ecosystem successfully deployed to Development K3S!"
          echo "🌐 Dev URL: https://dev.stage.techhyecosystem.build.infra.gyber.org" 