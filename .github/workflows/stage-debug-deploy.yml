name: üé≠ TECH HY Stage Debug Deploy

on:
  push:
    branches: [ stage-debug ]
  pull_request:
    branches: [ stage-debug ]

# Prevent concurrent deployments to stage-debug environment
concurrency:
  group: stage-debug-environment-${{ github.repository }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # üß™ Smart Contracts Testing
  contracts-test:
    name: üîó Smart Contracts Tests
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: üîß Install Dependencies
        run: npm ci

      - name: üî® Compile Contracts
        run: npm run compile

      - name: üß™ Run Tests
        run: npm run test

  # üé® Frontend Build for Stage Debug
  stage-debug-frontend-build:
    name: üé® Stage Debug Frontend Build
    runs-on: ubuntu-latest
    needs: [contracts-test]
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: üîß Install Dependencies
        run: npm ci

      - name: üîç Type Check
        run: npm run type-check

      - name: üèóÔ∏è Build Stage Debug
        run: npm run build
        env:
          NODE_ENV: production
          REACT_APP_ENVIRONMENT: stage-debug

      - name: üì¶ Upload Stage Debug Build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-stage-debug-dist
          path: frontend/dist/
          retention-days: 7

  # üê≥ Docker Build & Push for Stage Debug
  stage-debug-docker-build:
    name: üê≥ Stage Debug Docker Build
    runs-on: ubuntu-latest
    needs: [stage-debug-frontend-build]
    if: github.ref == 'refs/heads/stage-debug'
    permissions:
      contents: read
      packages: write
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üì¶ Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-stage-debug-dist
          path: frontend/dist/

      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.11.0

      - name: üîê Login to GitHub Container Registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: üìã Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch,suffix=-stage-debug
            type=sha,prefix=stage-debug-
            type=raw,value=stage-debug-latest

      - name: üèóÔ∏è Build and push Docker image
        uses: docker/build-push-action@v6.9.0
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # üöÄ Deploy to Stage Debug K3S
  deploy-stage-debug-k3s:
    name: üöÄ Deploy to Stage Debug
    runs-on: ubuntu-latest
    needs: [stage-debug-docker-build]
    if: github.ref == 'refs/heads/stage-debug'
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üîß Setup Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.29.0'

      - name: üìù Setup Kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: üîç Verify K3S Connection
        run: |
          kubectl cluster-info
          kubectl get nodes

      - name: üéØ Deploy to Stage Debug K3S
        run: |
          # Set stage-debug environment variables
          export IMAGE_TAG="stage-debug-latest"
          export NAMESPACE="techhy-ecosystem-stage-debug"
          # ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú SHORT_SHA –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–≥–æ–≤ –æ–±—Ä–∞–∑–æ–≤
          export SHORT_SHA="${{ github.sha }}"
          export SHORT_SHA_7="${SHORT_SHA:0:7}"
          export UNIQUE_IMAGE_TAG="stage-debug-${SHORT_SHA_7}"
          
          echo "üè∑Ô∏è Using unique image tag: $UNIQUE_IMAGE_TAG"
          
          # Create stage-debug namespace first
          kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
          
          # Create GHCR imagePullSecret after namespace exists
          kubectl create secret docker-registry ghcr-login \
            --docker-server=ghcr.io \
            --docker-username="${{ secrets.GHCR_USERNAME }}" \
            --docker-password="${{ secrets.GHCR_TOKEN }}" \
            --docker-email="dev@techhy.me" \
            -n $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
          
          # ‚úÖ –û–ë–ù–û–í–õ–Ø–ï–ú deployment —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –ø–µ—Ä–µ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º
          # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–º–µ–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
          kubectl apply -k k8s/overlays/stage-debug/
          
          # –ó–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–∑ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π SHA-based —Ç–µ–≥
          kubectl set image deployment/techhy-ecosystem-stage-debug-deployment \
            techhy-ecosystem-frontend=ghcr.io/gyberexperiment/tech-hy-ecosystem:${UNIQUE_IMAGE_TAG} \
            -n $NAMESPACE
          
          echo "‚úÖ Deployment updated with unique image: ghcr.io/gyberexperiment/tech-hy-ecosystem:${UNIQUE_IMAGE_TAG}"

      - name: üîç Comprehensive Health Check & Rollback Protection
        run: |
          echo "üîç Starting comprehensive health validation..."
          
          # Function to check application health
          check_health() {
            local url="https://stage.techhyecosystem.build.infra.gyber.org/"
            local max_attempts=10
            local wait_time=30
            
            for i in $(seq 1 $max_attempts); do
              echo "üìä Health check attempt $i/$max_attempts..."
              
              if curl -f -s --max-time 10 "$url" | grep -q "html"; then
                echo "‚úÖ Health check passed on attempt $i"
                return 0
              else
                echo "‚ùå Health check failed on attempt $i"
                if [ $i -lt $max_attempts ]; then
                  echo "‚è≥ Waiting ${wait_time}s before retry..."
                  sleep $wait_time
                fi
              fi
            done
            
            echo "üí• Health check failed after $max_attempts attempts"
            return 1
          }
          
          # Wait for pods to be ready
          echo "‚è≥ Waiting for deployment rollout..."
          if ! kubectl rollout status deployment/techhy-ecosystem-stage-debug-deployment -n techhy-ecosystem-stage-debug --timeout=300s; then
            echo "üí• Deployment rollout failed! Initiating rollback..."
            kubectl rollout undo deployment/techhy-ecosystem-stage-debug-deployment -n techhy-ecosystem-stage-debug
            exit 1
          fi
          
          # Additional wait for service to be fully ready
          echo "‚è≥ Waiting for service to be ready..."
          sleep 60
          
          # Perform health checks
          if ! check_health; then
            echo "üí• Health check validation FAILED! Initiating automatic rollback..."
            
            # Get current deployment revision
            current_revision=$(kubectl rollout history deployment/techhy-ecosystem-stage-debug-deployment -n techhy-ecosystem-stage-debug --revision=0 | tail -n1 | awk '{print $1}')
            echo "üìä Current revision: $current_revision"
            
            # Rollback to previous version
            echo "üîô Rolling back to previous working version..."
            kubectl rollout undo deployment/techhy-ecosystem-stage-debug-deployment -n techhy-ecosystem-stage-debug
            
            # Wait for rollback to complete
            echo "‚è≥ Waiting for rollback to complete..."
            kubectl rollout status deployment/techhy-ecosystem-stage-debug-deployment -n techhy-ecosystem-stage-debug --timeout=300s
            
            # Verify rollback health
            echo "üîç Verifying rollback health..."
            sleep 30
            if check_health; then
              echo "‚úÖ Rollback successful - application is healthy"
              echo "üí° Deployment failed but was automatically rolled back to working state"
              exit 1  # Still fail the pipeline to indicate deployment issue
            else
              echo "üí• CRITICAL: Rollback also failed! Manual intervention required!"
              exit 1
            fi
          fi
          
          echo "üéâ Health check validation PASSED! Deployment is healthy and ready."

      - name: ‚úÖ Final Deployment Validation
        run: |
          echo "üìä Final deployment status validation..."
          
          # ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –æ–±—Ä–∞–∑–µ
          echo "üè∑Ô∏è Current deployment image:"
          kubectl get deployment techhy-ecosystem-stage-debug-deployment -n techhy-ecosystem-stage-debug -o jsonpath='{.spec.template.spec.containers[0].image}'
          echo ""
          
          kubectl get pods -n techhy-ecosystem-stage-debug -l app=techhy-ecosystem-stage-debug
          kubectl get services -n techhy-ecosystem-stage-debug  
          kubectl get ingress -n techhy-ecosystem-stage-debug
          
          # Verify all pods are running
          RUNNING_PODS=$(kubectl get pods -n techhy-ecosystem-stage-debug -l app=techhy-ecosystem-stage-debug --field-selector=status.phase=Running --no-headers | wc -l)
          EXPECTED_PODS=2
          
          if [ "$RUNNING_PODS" -eq "$EXPECTED_PODS" ]; then
            echo "‚úÖ All $EXPECTED_PODS pods are running successfully"
          else
            echo "‚ö†Ô∏è Warning: Expected $EXPECTED_PODS pods, but only $RUNNING_PODS are running"
          fi

      - name: üéâ Stage Debug Deployment Success
        if: success()
        run: |
          # ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ SHA –∏ –æ–±—Ä–∞–∑–µ
          SHORT_SHA="${{ github.sha }}"
          SHORT_SHA_7="${SHORT_SHA:0:7}"
          UNIQUE_IMAGE_TAG="stage-debug-${SHORT_SHA_7}"
          
          echo "üéâ TECH HY Ecosystem successfully deployed to Stage Debug!"
          echo "üåê Stage Debug URL: https://stage.techhyecosystem.build.infra.gyber.org"
          echo "üîß Branch: stage-debug"
          echo "üìä Namespace: techhy-ecosystem-stage-debug"
          echo "üè∑Ô∏è Image Tag: $UNIQUE_IMAGE_TAG"
          echo "üìù Commit SHA: ${{ github.sha }}"
          echo "üîÑ This deployment uses unique SHA-based image tags for proper rollouts" 